% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/check_levels.R
\name{vec_check_levels}
\alias{vec_check_levels}
\alias{vec_grade_levels}
\title{Check that the levels of two factors are the same}
\usage{
vec_check_levels(object = .result, expected = .solution, env = parent.frame())

vec_grade_levels(
  object = .result,
  expected = .solution,
  max_diffs = 3,
  env = parent.frame(),
  ...
)
}
\arguments{
\item{object}{An object to be compared to \code{expected}.}

\item{expected}{An object containing the expected result.}

\item{env}{The environment in which to find \code{.result} and \code{.solution}.}

\item{max_diffs}{\verb{[numeric(1)]}\cr The maximum number of missing and/or
unexpected names to include in an informative failure message.
Defaults to 3.}

\item{...}{
  Arguments passed on to \code{\link[gradethis:graded]{gradethis::fail}}
  \describe{
    \item{\code{message}}{A character string of the message to be displayed. In all
grading helper functions other than \code{\link[gradethis:graded]{graded()}}, \code{message} is a template
string that will be processed with \code{\link[glue:glue]{glue::glue()}}.}
    \item{\code{hint}}{Include a code feedback hint with the failing message? This
argument only applies to \code{fail()} and \code{fail_if_equal()} and the message is
added using the default options of \code{\link[gradethis:code_feedback]{give_code_feedback()}} and
\code{\link[gradethis:code_feedback]{maybe_code_feedback()}}. The default value of \code{hint} can be set using
\code{\link[gradethis:gradethis_setup]{gradethis_setup()}} or the \code{gradethis.fail.hint} option.}
    \item{\code{encourage}}{Incude a random encouraging phrase with
\code{\link[gradethis:praise]{random_encouragement()}}? The default value of \code{encourage} can be set
using \code{\link[gradethis:gradethis_setup]{gradethis_setup()}} or the \code{gradethis.fail.encourage} option.}
  }}
}
\value{
If there are any issues, a \link{list} from \code{vec_check_levels()} or a
\code{\link[gradethis:graded]{gradethis::fail()}} message from \code{vec_grade_levels()}.
Otherwise, invisibly returns \code{\link{NULL}}.
}
\description{
Checks if \code{object} and \code{expected} have the same \link[=levels]{levels}.
If the levels differ
\itemize{
\item \code{vec_check_levels()} returns a list describing the problem
\item \code{vec_grade_levels()} returns a failing grade and informative message
with \code{\link[gradethis:graded]{gradethis::fail()}}
}
}
\section{Problems}{

\enumerate{
\item \code{levels_n}: \code{object} and \code{expected} have a different number of levels.
\item \code{levels}: The object has levels that are not expected,
or is missing levels that are expected.
\item \code{levels_reversed}: The \code{levels} of \code{object} are in the opposite order
of \code{expected}.
\item \code{level_order}: The levels of \code{object} are not in the same order
as \code{expected}.
}
}

\examples{
.result <- as.factor(rep_len(letters[1:3], 6))
.solution <- as.factor(rep_len(letters[1:2], 6))
vec_check_levels()
vec_grade_levels()

.result <- as.factor(letters[1:6])
.solution <- as.factor(letters[21:26])
vec_check_levels()
vec_grade_levels()
vec_grade_levels(max_diffs = 5)
vec_grade_levels(max_diffs = Inf)
}
