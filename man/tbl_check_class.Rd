% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tbl_check_class.R
\name{tbl_check_class}
\alias{tbl_check_class}
\alias{vec_check_class}
\alias{tbl_grade_class}
\alias{vec_grade_class}
\title{Checks that two objects have the same classes}
\usage{
tbl_check_class(
  object = .result,
  expected = .solution,
  ignore_class = NULL,
  env = parent.frame()
)

vec_check_class(
  object = .result,
  expected = .solution,
  ignore_class = NULL,
  env = parent.frame()
)

tbl_grade_class(
  object = .result,
  expected = .solution,
  ignore_class = NULL,
  env = parent.frame(),
  ...
)

vec_grade_class(
  object = .result,
  expected = .solution,
  ignore_class = NULL,
  env = parent.frame(),
  ...
)
}
\arguments{
\item{object}{An object to be compared to \code{expected}.}

\item{expected}{An object containing the expected result.}

\item{ignore_class}{\verb{[character()]}\cr A vector of classes to ignore when
finding differences between \code{object} and \code{expected}.

If an element is named, differences will only be ignored between the pair
of the element and its name.
For example, \code{ignore_class = c("integer" = "numeric")} will ignore class
differences only if \code{object} has class \link{integer} and \code{expected} has class
\link{numeric}, or vice versa.

If all the classes of \code{expected} are included in \code{ignore_class},
a \code{class} problem will never be returned.}

\item{env}{The environment in which to find \code{.result} and \code{.solution}.}

\item{...}{
  Arguments passed on to \code{\link[gradethis:graded]{gradethis::fail}}
  \describe{
    \item{\code{hint}}{Include a code feedback hint with the failing message? This
argument only applies to \code{fail()} and \code{fail_if_equal()} and the message is
added using the default options of \code{\link[gradethis:give_code_feedback]{give_code_feedback()}} and
\code{\link[gradethis:maybe_code_feedback]{maybe_code_feedback()}}. The default value of \code{hint} can be set using
\code{\link[gradethis:gradethis_setup]{gradethis_setup()}} or the \code{gradethis.fail.hint} option.}
    \item{\code{encourage}}{Include a random encouraging phrase with
\code{\link[gradethis:random_encouragement]{random_encouragement()}}? The default value of \code{encourage} can be set
using \code{\link[gradethis:gradethis_setup]{gradethis_setup()}} or the \code{gradethis.fail.encourage} option.}
  }}
}
\value{
If there are any issues, a \link{list} from \code{tbl_check_class()} and
\code{vec_check_class()} or a \code{\link[gradethis:graded]{gradethis::fail()}} message from
\code{tbl_grade_class()} and \code{vec_grade_class()}.
Otherwise, invisibly returns \code{\link{NULL}}.
}
\description{
Checks if \code{object} and \code{expected} have the same \link[=class]{class}.
If the classes differ
\itemize{
\item \code{tbl_check_class()} and \code{vec_check_class()} return a list describing
the problem
\item \code{tbl_grade_class()} and \code{vec_grade_class()} return a failing grade and
informative message with \code{\link[gradethis:graded]{gradethis::fail()}}
}
}
\section{Problems}{

\enumerate{
\item \code{class}: The object does not have the expected classes
}
}

\examples{
.result <- 1:10
.solution <- as.character(1:10)
vec_check_class()
vec_grade_class()

.result <- data.frame(a = 1:10)
.solution <- tibble::tibble(a = 1:10)
tbl_check_class()
tbl_grade_class()

.result <- tibble::tibble(a = 1:10, b = a \%\% 2 == 0)
.solution <- dplyr::group_by(tibble::tibble(a = 1:10, b = a \%\% 2 == 0), b)
tbl_check_class()
tbl_grade_class()

# Ignore the difference between tibble and data frame
.result <- data.frame(a = 1:10)
.solution <- tibble::tibble(a = 1:10)
tbl_check_class(ignore_class = c("tbl_df", "tbl"))
tbl_grade_class(ignore_class = c("tbl_df", "tbl"))

# Ignore the difference between integer and double
.result <- 1L
.solution <- 1
vec_check_class(ignore_class = c("integer" = "numeric"))
vec_grade_class(ignore_class = c("integer" = "numeric"))

}
