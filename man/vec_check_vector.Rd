% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/check_vector.R
\name{vec_check_vector}
\alias{vec_check_vector}
\alias{vec_grade_vector}
\title{Checks that two vectors are the same}
\usage{
vec_check_vector(
  object = .result,
  expected = .solution,
  check_class = TRUE,
  check_length = TRUE,
  check_levels = TRUE,
  check_values = TRUE,
  check_names = TRUE,
  env = parent.frame()
)

vec_grade_vector(
  object = .result,
  expected = .solution,
  max_diffs = 3,
  check_class = TRUE,
  check_length = TRUE,
  check_values = TRUE,
  check_names = TRUE,
  env = parent.frame(),
  ...
)
}
\arguments{
\item{object}{A vector to be compared to \code{expected}.}

\item{expected}{A vector containing the expected result.}

\item{check_class}{\verb{[logical(1)]}\cr Whether to check that \code{object} and
\code{expected} have the same classes.}

\item{check_length}{\verb{[logical(1)]}\cr Whether to check that \code{object} and
\code{expected} have the same length.}

\item{check_levels}{\verb{[logical(1)]}\cr Whether to check that \code{object} and
\code{expected} have the same \link[=levels]{factor levels}.}

\item{check_values}{\verb{[logical(1)]}\cr Whether to check that \code{object} and
\code{expected} contain the same values.}

\item{check_names}{\verb{[logical(1)]}\cr Whether to check that \code{object} and
\code{expected} have the same names.}

\item{env}{The environment in which to find \code{.result} and \code{.solution}.}

\item{max_diffs}{\verb{[numeric(1)]}\cr The maximum number of mismatched values to
print. Defaults to 3.}

\item{...}{
  Arguments passed on to \code{\link[gradethis:graded]{gradethis::fail}}
  \describe{
    \item{\code{message}}{A character string of the message to be displayed. In all
grading helper functions other than \code{\link[gradethis:graded]{graded()}}, \code{message} is a template
string that will be processed with \code{\link[glue:glue]{glue::glue()}}.}
    \item{\code{hint}}{Include a code feedback hint with the failing message? This
argument only applies to \code{fail()} and \code{fail_if_equal()} and the message is
added using the default options of \code{\link[gradethis:code_feedback]{give_code_feedback()}} and
\code{\link[gradethis:code_feedback]{maybe_code_feedback()}}. The default value of \code{hint} can be set using
\code{\link[gradethis:gradethis_setup]{gradethis_setup()}} or the \code{gradethis.fail.hint} option.}
    \item{\code{encourage}}{Incude a random encouraging phrase with
\code{\link[gradethis:praise]{random_encouragement()}}? The default value of \code{encourage} can be set
using \code{\link[gradethis:gradethis_setup]{gradethis_setup()}} or the \code{gradethis.fail.encourage} option.}
  }}
}
\value{
If there are any issues, a \link{list} from \code{vec_check_vector()} or a
\code{\link[gradethis:graded]{gradethis::fail()}} message from \code{vec_grade_vector()}.
Otherwise, invisibly returns \code{\link{NULL}}.
}
\description{
Check if two vectors have the same class, length, and values.
If the vectors differ
\itemize{
\item \code{vec_check_vector()} returns a list describing the problem
\item \code{vec_grade_vector()} returns a failing grade and informative message
with \code{\link[gradethis:graded]{gradethis::fail()}}
}
}
\section{Problems}{

\enumerate{
\item \code{class}: \code{object} doesn't have the same classes as \code{expected}.
\item \code{length}: \code{object} doesn't have the same length as \code{expected}.
\item \code{levels_n}, \code{levels}, \code{levels_reversed}, \code{levels_order}:
See \code{\link[=vec_check_levels]{vec_check_levels()}}.
\item \code{values}: \code{object} doesn't contain the same values as \code{expected}.
\item \code{names}: \code{object} has different \link[=names]{names} than \code{expected}.
\item \code{names_order}: \code{object} has the same \link[=names]{names} as \code{expected},
but in a different order.
}
}

\examples{
.result <- 1:10
.solution <- letters[1:10]
vec_check_vector()
vec_grade_vector()

.result <- 1:10
.solution <- 1:11
vec_check_vector()
vec_grade_vector()

.result <- 1:10
.solution <- rlang::set_names(1:10, letters[1:10])
vec_check_vector()
vec_grade_vector()
vec_grade_vector(max_diffs = 5)
vec_grade_vector(max_diffs = Inf)

.result <- 1:10
.solution <- 11:20
vec_check_vector()
vec_grade_vector()
vec_grade_vector(max_diffs = 5)
vec_grade_vector(max_diffs = Inf)
}
