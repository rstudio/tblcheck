[{"path":[]},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement [INSERT CONTACT METHOD]. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/ code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https:// www.contributor-covenant.org/translations.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 tblcheck authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/articles/examples.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Examples of tblcheck in action","text":"help get feel kind advice tblcheck provides, ’ve collected example exercises use grade_this_table() grade_this_vector() tblcheck grade learnr exercise. examples , ’ll show specific R chunks ’d need prepare exercise. Globally, assume learnr gradethis already loaded, ’ve made adjustments default gradethis options using gradethis::gradethis_setup(): Note examples ’re using either grade_this_table() grade_this_vector() without additional customizations. ’ve also made sure exercise contains -solution chunk. (Read set exercise use tblcheck.)","code":"```{r setup} library(learnr) library(gradethis) library(tblcheck)  gradethis_setup(   pass.praise = TRUE,   fail.hint = TRUE,   fail.encourage = TRUE,   maybe_code_feedback.before = \"\\n\\n\" ) ```"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/articles/examples.html","id":"create-a-table","dir":"Articles","previous_headings":"","what":"Create a Table","title":"Examples of tblcheck in action","text":"first example repeats example presented Get started article. goal learner use tibble::tibble() function create table, takes tries. Prompt Create tibble three columns: food, vegetable, color. food, store “lettuce” “tomato”. vegetable, store whether food vegetable. color, store color food. Exercise Code Correct Answer Wrong Class Wrong Names Wrong Length Wrong Column Class Wrong Column Values","code":"```{r tomato-setup} library(tibble) ```  ```{r tomato, exercise=TRUE}  ```  ```{r tomato-solution} tibble(     food = c(\"lettuce\", \"tomato\"),     vegetable = c(TRUE, FALSE),     color = c(\"green\", \"red\") ) ```  ```{r tomato-check} grade_this_table() ``` tibble(     food = c(\"lettuce\", \"tomato\"),     vegetable = c(TRUE, FALSE),     color = c(\"green\", \"red\") ) #> # A tibble: 2 × 3 #>   food    vegetable color #>   <chr>   <lgl>     <chr> #> 1 lettuce TRUE      green #> 2 tomato  FALSE     red list(     food = \"lettuce\",     fruit = \"TRUE\",     color = \"green\" ) #> $food #> [1] \"lettuce\" #>  #> $fruit #> [1] \"TRUE\" #>  #> $color #> [1] \"green\" tibble(     food = \"lettuce\",     fruit = \"TRUE\",     color = \"green\" ) #> # A tibble: 1 × 3 #>   food    fruit color #>   <chr>   <chr> <chr> #> 1 lettuce TRUE  green tibble(     food = \"lettuce\",     vegetable = \"TRUE\",     color = \"green\" ) #> # A tibble: 1 × 3 #>   food    vegetable color #>   <chr>   <chr>     <chr> #> 1 lettuce TRUE      green tibble(     food = c(\"lettuce\", \"tomato\"),     vegetable = c(\"TRUE\", \"TRUE\"),     color = c(\"green\", \"red\") ) #> # A tibble: 2 × 3 #>   food    vegetable color #>   <chr>   <chr>     <chr> #> 1 lettuce TRUE      green #> 2 tomato  TRUE      red tibble(     food = c(\"lettuce\", \"tomato\"),     vegetable = c(TRUE, TRUE),     color = c(\"green\", \"red\") ) #> # A tibble: 2 × 3 #>   food    vegetable color #>   <chr>   <lgl>     <chr> #> 1 lettuce TRUE      green #> 2 tomato  TRUE      red"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/articles/examples.html","id":"transform-a-table-with-transmute","dir":"Articles","previous_headings":"","what":"Transform a Table with transmute()","title":"Examples of tblcheck in action","text":"first example shows problems tblcheck discover. example, however, realistic. problem students asked use dplyr::transmute() function transform starwars dataset. Prompt Consider starwars dataset. Use transmute() turn convert height centimeters inches mass kilgrams pounds, keeping columns. Exercise Code Correct Answer Wrong Function Wrong Column Order Wrong Column Classes Wrong Calculation correct answer uses dplyr::transmute() divide height column 2.54 (convert height cm ) multiply mass column 2.205 (convert kg lb). Note transmute() keeps columns named calculations, final table two columns. example, student uses dplyr::mutate(), certainly reasonable choice requested. result, submission contains columns expected. student done less right thing, specified columns opposite order. decide don’t mind columns aren’t right order, set check_column_order = FALSE check code exercise. student somehow create columns incorrect class, e.g. integer values doubles expected, tblcheck alert mistake. values completely wrong — student multiplying height 2.54 rather dividing — tblcheck points column incorrect gives hint expected values.","code":"```{r starwars-setup} library(dplyr) ```  ```{r starwars, exercise=TRUE}  ```  ```{r starwars-solution} starwars %>%     transmute(         height = height / 2.54,         mass = mass * 2.205     ) ```  ```{r starwars-check} grade_this_table(check_column_order = TRUE) ``` starwars %>%     transmute(         height = height / 2.54,         mass = mass * 2.205     ) #> # A tibble: 87 × 2 #>    height  mass #>     <dbl> <dbl> #>  1   67.7 170.  #>  2   65.7 165.  #>  3   37.8  70.6 #>  4   79.5 300.  #>  5   59.1 108.  #>  6   70.1 265.  #>  7   65.0 165.  #>  8   38.2  70.6 #>  9   72.0 185.  #> 10   71.7 170.  #> # … with 77 more rows starwars %>%     mutate(         height = height / 2.54,         mass = mass * 2.205     ) #> # A tibble: 87 × 14 #>    name      height  mass hair_…¹ skin_…² eye_c…³ birth…⁴ sex   gender #>    <chr>      <dbl> <dbl> <chr>   <chr>   <chr>     <dbl> <chr> <chr>  #>  1 Luke Sky…   67.7 170.  blond   fair    blue       19   male  mascu… #>  2 C-3PO       65.7 165.  NA      gold    yellow    112   none  mascu… #>  3 R2-D2       37.8  70.6 NA      white,… red        33   none  mascu… #>  4 Darth Va…   79.5 300.  none    white   yellow     41.9 male  mascu… #>  5 Leia Org…   59.1 108.  brown   light   brown      19   fema… femin… #>  6 Owen Lars   70.1 265.  brown,… light   blue       52   male  mascu… #>  7 Beru Whi…   65.0 165.  brown   light   blue       47   fema… femin… #>  8 R5-D4       38.2  70.6 NA      white,… red        NA   none  mascu… #>  9 Biggs Da…   72.0 185.  black   light   brown      24   male  mascu… #> 10 Obi-Wan …   71.7 170.  auburn… fair    blue-g…    57   male  mascu… #> # … with 77 more rows, 5 more variables: homeworld <chr>, #> #   species <chr>, films <list>, vehicles <list>, starships <list>, #> #   and abbreviated variable names ¹​hair_color, ²​skin_color, #> #   ³​eye_color, ⁴​birth_year starwars %>%     transmute(         mass = mass * 2.205,         height = height / 2.54     ) #> # A tibble: 87 × 2 #>     mass height #>    <dbl>  <dbl> #>  1 170.    67.7 #>  2 165.    65.7 #>  3  70.6   37.8 #>  4 300.    79.5 #>  5 108.    59.1 #>  6 265.    70.1 #>  7 165.    65.0 #>  8  70.6   38.2 #>  9 185.    72.0 #> 10 170.    71.7 #> # … with 77 more rows ```{r starwars-check} grade_this_table(check_column_order = FALSE) ``` starwars %>%     transmute(         mass = as.integer(mass * 2.205),         height = as.integer(height / 2.54)     ) #> # A tibble: 87 × 2 #>     mass height #>    <int>  <int> #>  1   169     67 #>  2   165     65 #>  3    70     37 #>  4   299     79 #>  5   108     59 #>  6   264     70 #>  7   165     64 #>  8    70     38 #>  9   185     72 #> 10   169     71 #> # … with 77 more rows starwars %>%     transmute(         height = height * 2.54,         mass = mass * 2.205     ) #> # A tibble: 87 × 2 #>    height  mass #>     <dbl> <dbl> #>  1   437. 170.  #>  2   424. 165.  #>  3   244.  70.6 #>  4   513. 300.  #>  5   381  108.  #>  6   452. 265.  #>  7   419. 165.  #>  8   246.  70.6 #>  9   465. 185.  #> 10   462. 170.  #> # … with 77 more rows"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/articles/examples.html","id":"transform-a-factor-column","dir":"Articles","previous_headings":"","what":"Transform a Factor Column","title":"Examples of tblcheck in action","text":"example comes lesson factors R. Students just learned functions forcats package, now asked practice using forcats::fct_reorder(). Prompt Consider marital_age dataset. Use fct_reorder() turn marital column factor levels ordered based avg_age. Exercise Code Correct Answer Wrong Function Wrong Column Wrong Direction created new table specifically exercise factor-setup chunk, drawing data provided forcats::gss_cat. Since students aren’t familiar marital_age table, ’ve included starter code can see initial state table start exercise. expected solution, student use forecats::fct_reorder() function transform marital column, reordering factor levels increasing avg_age. student forgets forcats::fct_reorder() function tries use order() set order factor levels marital column. case student remembers use forecats::fct_reorder() incorrectly assigns result unexpected column. another case, student uses forecats::fct_reorder() sets .desc = TRUE, resulting unexpected ordering factor levels.","code":"```{r factor-setup} library(dplyr) library(forcats)  marital_age <- gss_cat %>%     mutate(marital = as.character(marital)) %>%     group_by(marital) %>%     summarize(avg_age = mean(age, na.rm = TRUE)) %>%     ungroup() ```  ```{r factor, exercise=TRUE} marital_age ```  ```{r factor-solution} marital_age %>%     mutate(marital = fct_reorder(marital, avg_age)) ```  ```{r factor-check} grade_this_table() ``` marital_age #> # A tibble: 6 × 2 #>   marital       avg_age #>   <chr>           <dbl> #> 1 Divorced         51.1 #> 2 Married          48.7 #> 3 Never married    33.9 #> 4 No answer        52.4 #> 5 Separated        45.3 #> 6 Widowed          71.7 marital_age %>%     mutate(marital = fct_reorder(marital, avg_age)) #> # A tibble: 6 × 2 #>   marital       avg_age #>   <fct>           <dbl> #> 1 Divorced         51.1 #> 2 Married          48.7 #> 3 Never married    33.9 #> 4 No answer        52.4 #> 5 Separated        45.3 #> 6 Widowed          71.7 marital_age %>%     mutate(marital = order(marital, avg_age)) #> # A tibble: 6 × 2 #>   marital avg_age #>     <int>   <dbl> #> 1       1    51.1 #> 2       2    48.7 #> 3       3    33.9 #> 4       4    52.4 #> 5       5    45.3 #> 6       6    71.7 marital_age %>%     mutate(marital_fct = fct_reorder(marital, avg_age)) #> # A tibble: 6 × 3 #>   marital       avg_age marital_fct   #>   <chr>           <dbl> <fct>         #> 1 Divorced         51.1 Divorced      #> 2 Married          48.7 Married       #> 3 Never married    33.9 Never married #> 4 No answer        52.4 No answer     #> 5 Separated        45.3 Separated     #> 6 Widowed          71.7 Widowed marital_age %>%     mutate(marital = fct_reorder(marital, avg_age, .desc = TRUE)) #> # A tibble: 6 × 2 #>   marital       avg_age #>   <fct>           <dbl> #> 1 Divorced         51.1 #> 2 Married          48.7 #> 3 Never married    33.9 #> 4 No answer        52.4 #> 5 Separated        45.3 #> 6 Widowed          71.7"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/articles/examples.html","id":"subset-a-vector-with-stringr","dir":"Articles","previous_headings":"","what":"Subset a Vector with stringr","title":"Examples of tblcheck in action","text":"addition table-checking functions, tblcheck includes functions checking vectors — , columns table vectors! ’s example exercise tutorial string transformations stringr package. Students asked practice concepts just discovered tutorial: Prompt Consider fruit data. Use function stringr create vector containing fruits one word name. Hint: fruit named one word also least one space name. Exercise Code Correct Answer Wrong Class Wrong Length Wrong Subset exercise markdown, call grade_this_vector() string-check chunk automatically compare result student’s submission string-solution. Note fruit stringr::fruit, vector containing 80 fruit names. 11 80 fruits one word. ’s favorite two-worded fruit name? (Mine purple mangosteen.) student submission makes potentially common mistake hoping stringr::str_which() return fruit pattern. Instead, str_which() follows base R function (), returns integer index indicating items fruit pattern matched. another mistake example, student probably expected stringr::str_extract() extract elements vector. However, str_extract() instead extracts pattern item, returns vector length input. Finally, student might chosen right function, missed hint came pattern ’s clever. student probably looked first 20 fruit names took guess answer.","code":"```{r string-setup} library(dplyr) library(stringr) ```  ```{r string, exercise=TRUE}  ```  ```{r string-solution} str_subset(fruit, \" \") ```  ```{r string-check} grade_this_vector() ``` head(stringr::fruit, 20) #>  [1] \"apple\"        \"apricot\"      \"avocado\"      \"banana\"       #>  [5] \"bell pepper\"  \"bilberry\"     \"blackberry\"   \"blackcurrant\" #>  [9] \"blood orange\" \"blueberry\"    \"boysenberry\"  \"breadfruit\"   #> [13] \"canary melon\" \"cantaloupe\"   \"cherimoya\"    \"cherry\"       #> [17] \"chili pepper\" \"clementine\"   \"cloudberry\"   \"coconut\" str_subset(fruit, \" \") #>  [1] \"bell pepper\"       \"blood orange\"      \"canary melon\"      #>  [4] \"chili pepper\"      \"goji berry\"        \"kiwi fruit\"        #>  [7] \"purple mangosteen\" \"rock melon\"        \"salal berry\"       #> [10] \"star fruit\"        \"ugli fruit\" str_which(fruit, \" \") #>  [1]  5  9 13 17 32 42 66 72 73 75 79 str_extract(fruit, \" \") #>  [1] NA  NA  NA  NA  \" \" NA  NA  NA  \" \" NA  NA  NA  \" \" NA  NA  NA  #> [17] \" \" NA  NA  NA  #>  [ reached getOption(\"max.print\") -- omitted 60 entries ] str_subset(fruit, \" (pepper|orange|melon|fruit)\") #> [1] \"bell pepper\"  \"blood orange\" \"canary melon\" \"chili pepper\" #> [5] \"kiwi fruit\"   \"rock melon\"   \"star fruit\"   \"ugli fruit\""},{"path":[]},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/articles/tblcheck.html","id":"introducing-tblcheck","dir":"Articles","previous_headings":"Overview","what":"Introducing tblcheck","title":"Get started with tblcheck","text":"tblcheck works gradethis help instructors compare students’ exercise results intended solutions learnr tutorials. new grading learnr tutorials, recommend get comfortable gradethis incorporating tblcheck tutorials. tblcheck provides four levels grading: fully automatic grading drop-replacement gradethis::grade_this(), use grade_this_table() grade_this_vector(). integrate tblcheck existing grading code, can use tbl_grade() vec_grade() specific automated checks. can directly call specialized individual grading functions power higher-level functions. Finally, can check table vector problems create custom feedback. common use case tblcheck provide automatic feedback common problems tables. columns data frames R vectors, tblcheck can also provide feedback common problems vectors vec_grade(). --one grading functions check set possible problems, differences, exercise solution student’s table vector. can control checks applied arguments functions, can directly call individual grading functions. table grading functions prefixed tbl_grade_ vector grading functions prefixed vec_grade_. complete control feedback presented users, tbl_grade_ vec_grade_ function paired tbl_check_ vec_check_ counterpart finds problems returns object can use create custom feedback.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/articles/tblcheck.html","id":"usage","dir":"Articles","previous_headings":"Overview","what":"Usage","title":"Get started with tblcheck","text":"use tblcheck learnr tutorial, load tblcheck learnr gradethis setup chunk tutorial: , ensure exercise -solution chunk choose one following grading functions grade exercise: solution table, use grade_this_table() use tbl_grade() existing grading code. solution column table, use grade_this_column() use tbl_grade_column() existing grading code. solution vector, use grade_this_vector() use vec_grade() existing grading code. cases, fully automated first version functionally equivalent second version uses gradethis::grade_this().","code":"```{r setup} library(learnr) library(gradethis) library(tblcheck) ``` ```{r ex-check} grade_this_table() ``` ```{r ex-check} grade_this({   pass_if_equal()   tbl_grade()   pass() }) ``` ```{r ex-check} grade_this_column(\"eruptions\") ``` ```{r ex-check} grade_this({   pass_if_equal()   tbl_grade_column()   pass() }) ``` ```{r ex-check} grade_this_vector() ``` ```{r ex-check} grade_this({   pass_if_equal()   vec_grade()   pass() }) ```"},{"path":[]},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/articles/tblcheck.html","id":"automated-table-checking","dir":"Articles","previous_headings":"Grading tables","what":"Automated table checking","title":"Get started with tblcheck","text":"grade_this_table() uses tbl_grade() compare result user’s input result -solution chunk, automatically returning targeted feedback user problems discovered. tbl_grade() checks user’s table correct class, correct column names, correct number rows columns, correct class contains correct values. checks detect problem submitted code, student see single message first detected issue, based order described .","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/articles/tblcheck.html","id":"usage-1","dir":"Articles","previous_headings":"Grading tables","what":"Usage","title":"Get started with tblcheck","text":"grade exercise solution table, ensure -solution chunk call grade_this_table() -check chunk add tbl_grade() grading code -check chunk. default, tblcheck functions compare gradethis objects .result .solution, just like gradethis::pass_if_equal() gradethis::fail_if_equal(). using tbl_grade(), sure include function like pass() pass_if_equal() checking code ensure students can get passing grade! tbl_grade() returns feedback student discovers problem; student gives correct answer, produces output. lets quickly check simple problems, following detailed checking gradethis functions.","code":"```{r example-check} grade_this_table() ``` ```{r example-check} grade_this({   pass_if_equal()   tbl_grade()   pass() }) ```"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/articles/tblcheck.html","id":"finding-problems","dir":"Articles","previous_headings":"Grading tables","what":"Finding problems","title":"Get started with tblcheck","text":"user’s submitted table differs correct table, grade_this_table() returns failing grade message explanation went wrong. multiple problems student’s submission, grade_this_table() tries give actionable item first. ’ll demonstrate works simple exercise asks students create following table using tibble(). R Markdown source learnr tutorial, use exercise chunk labelled food, food-solution chunk expected solution food-check chunk exercise checking code using gradethis tblcheck. ’ll use example throughout sections follow demonstrate tblcheck respond various types errors students may make. Keep mind contrived example designed vignette. real-world usage, students likely encounter one two problems grade_this_table() designed find.","code":"```{r food, exercise=TRUE}  ```  ```{r food-solution} tibble(     food = c(\"lettuce\", \"tomato\"),     vegetable = c(TRUE, FALSE),     color = c(\"green\", \"red\") ) ```  ```{r food-check} grade_this_table() ```"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/articles/tblcheck.html","id":"checking-class","dir":"Articles","previous_headings":"Grading tables > Finding problems","what":"Checking class","title":"Get started with tblcheck","text":"First, grade_this_table() ensures class student’s submission matches class expected solution. , student attempts store data table list rather using tibble(). Based advice, student revises solution use tibble() instead list().","code":"list(     food = \"lettuce\",     fruit = \"TRUE\",     color = \"green\" ) #> $food #> [1] \"lettuce\" #>  #> $fruit #> [1] \"TRUE\" #>  #> $color #> [1] \"green\""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/articles/tblcheck.html","id":"checking-column-names","dir":"Articles","previous_headings":"Grading tables > Finding problems","what":"Checking column names","title":"Get started with tblcheck","text":"Next, code checks student used correct column names, haven’t missed columns included unexpected columns. , grade_this_table() notices student unexpected column named fruit. Based advice, student revises solution name second column vegetable instead fruit.","code":"tibble(     food = \"lettuce\",     fruit = \"TRUE\",     color = \"green\" ) #> # A tibble: 1 × 3 #>   food    fruit color #>   <chr>   <chr> <chr> #> 1 lettuce TRUE  green"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/articles/tblcheck.html","id":"checking-length","dir":"Articles","previous_headings":"Grading tables > Finding problems","what":"Checking length","title":"Get started with tblcheck","text":"Next, grade_this_table() checks student submitted correct number rows, case notices student included one row. Based advice, student realizes ’ve entered first row table. go back example table add second row submission.","code":"tibble(     food = \"lettuce\",     vegetable = \"TRUE\",     color = \"green\" ) #> # A tibble: 1 × 3 #>   food    vegetable color #>   <chr>   <chr>     <chr> #> 1 lettuce TRUE      green"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/articles/tblcheck.html","id":"checking-column-classes","dir":"Articles","previous_headings":"Grading tables > Finding problems","what":"Checking column classes","title":"Get started with tblcheck","text":"Next, grade_this_table() checks individual column contains correct type data. , student stored values vegetable column string, expecting logical values. Based advice, student removes \" around values vegetable column use R’s logical TRUE.","code":"tibble(     food = c(\"lettuce\", \"tomato\"),     vegetable = c(\"TRUE\", \"TRUE\"),     color = c(\"green\", \"red\") ) #> # A tibble: 2 × 3 #>   food    vegetable color #>   <chr>   <chr>     <chr> #> 1 lettuce TRUE      green #> 2 tomato  TRUE      red"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/articles/tblcheck.html","id":"checking-column-values","dir":"Articles","previous_headings":"Grading tables > Finding problems","what":"Checking column values","title":"Get started with tblcheck","text":"Finally, grade_this_table() gives hint values column look like. , student made mistake transcription vegetable column. Based advice, student revises submission, changing second value vegetable column TRUE FALSE.","code":"tibble(     food = c(\"lettuce\", \"tomato\"),     vegetable = c(TRUE, TRUE),     color = c(\"green\", \"red\") ) #> # A tibble: 2 × 3 #>   food    vegetable color #>   <chr>   <lgl>     <chr> #> 1 lettuce TRUE      green #> 2 tomato  TRUE      red tibble(     food = c(\"lettuce\", \"tomato\"),     vegetable = c(TRUE, FALSE),     color = c(\"green\", \"red\") ) #> # A tibble: 2 × 3 #>   food    vegetable color #>   <chr>   <lgl>     <chr> #> 1 lettuce TRUE      green #> 2 tomato  FALSE     red"},{"path":[]},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/articles/tblcheck.html","id":"automated-vector-checking","dir":"Articles","previous_headings":"Grading vectors","what":"Automated vector checking","title":"Get started with tblcheck","text":"Many table-grading tests apply columns tables can also applied vectors — , data frame columns R vectors. exercise uses vectors rather tables, grade_this_vector() vec_grade() allows apply tests normally applied columns table vector. check user’s vector correct class correct length correct factor levels (vector factor) contains correct values correct names (vector names) Like grade_this_table(), problem detected checks, student see single message first detected problem, based order described .","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/articles/tblcheck.html","id":"usage-2","dir":"Articles","previous_headings":"Grading vectors","what":"Usage","title":"Get started with tblcheck","text":"grade exercise solution vector, ensure -solution chunk call grade_this_vector() -check chunk add vec_grade() grading code -check chunk, e.g. Just like tbl_grade() tblcheck functions, vec_grade() automatically compares user’s .result .solution used gradethis::grade_this(). grade_this_vector() always returns passing failing grade, note vec_grade() returns feedback problem detected. sure include gradethis::pass() gradethis::pass_if_equal() using vec_grade() ensure students can get passing grade.","code":"```{r vector-check} grade_this_vector() ``` ```{r vector-check} grade_this({   pass_if_equal()   vec_grade()   pass() }) ```"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/articles/tblcheck.html","id":"finding-problems-1","dir":"Articles","previous_headings":"Grading vectors","what":"Finding problems","title":"Get started with tblcheck","text":"user’s submitted vector differs correct vector, grade_this_vector() returns failing grade message explanation went wrong. multiple problems student’s submission, grade_this_vector() tries give actionable item first. Suppose exercise asks student create factor sandwich toppings — lettuce, tomato, avocado. R Markdown source learnr tutorial, use exercise chunk labelled toppings, toppings-solution chunk expected solution toppings-check chunk exercise checking code using gradethis tblcheck. example, student submits vector wrong class, first message returned grade_this_vector(). student submits factor wrong factor levels, grade_this_vector() warn student mistake.","code":"factor(c(\"lettuce\", \"tomato\", \"avocado\")) #> [1] lettuce tomato  avocado #> Levels: avocado lettuce tomato ```{r toppings, exercise=TRUE}  ```  ```{r toppings-solution} factor(c(\"lettuce\", \"tomato\", \"avocado\")) ```  ```{r toppings-check} grade_this_vector() ``` c(\"lettuce\", \"tomato\", \"avocado\") #> [1] \"lettuce\" \"tomato\"  \"avocado\" factor(c(\"lettuce\", \"tomato\", \"avocado\"), c(\"lettuce\", \"tomato\", \"avocado\")) #> [1] lettuce tomato  avocado #> Levels: lettuce tomato avocado"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/articles/tblcheck.html","id":"custom-grading","dir":"Articles","previous_headings":"","what":"Custom Grading","title":"Get started with tblcheck","text":"number ways control mistakes detected feedback given students. first enable disable specific checks using check_* arguments grade_this_table() grade_this_vector() (counterparts, tbl_grade() vec_grade()). grade_this_table() grade_this_vector() include pre_check post_check options allow add additional tests logic grading code. may also choose call specific grading functions associated checks underlying tbl_grade() vec_grade(). can check rather grade specific problems obtain problem object, .e. description problem found tblcheck. can use problem object construct feedback message using gradethis::fail().","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/articles/tblcheck.html","id":"skipping-tests","dir":"Articles","previous_headings":"Custom Grading","what":"Skipping tests","title":"Get started with tblcheck","text":"Every test performed grade_this_table() grade_this_vector() (tbl_grade() vec_grade()) can enabled disabled argument. argument names prefixed check_ — check_class check_groups — take TRUE FALSE value. example, suppose student answering food exercise used data.frame exercise expects tibble. don’t care class table, can add check_class = FALSE grade_this_table(). skip checking table’s class, still run tests. Since problem student’s submission class table, grade_this_table() doesn’t directly return feedback.","code":"data.frame(     food = c(\"lettuce\", \"tomato\"),     vegetable = c(TRUE, FALSE),     color = c(\"green\", \"red\"),     stringsAsFactors = FALSE ) #>      food vegetable color #> 1 lettuce      TRUE green #> 2  tomato     FALSE   red ```{r food-check} grade_this_table(check_class = FALSE) ```"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/articles/tblcheck.html","id":"additional-checks","dir":"Articles","previous_headings":"Custom Grading","what":"Additional Checks","title":"Get started with tblcheck","text":"grade_this_table() grade_this_vector() provide two additional arguments, pre_check post_check, allow add additional checks modify .result .solution. functions, gradethis::grade_this() flow roughly equivalent following code sketch: Two examples reasons might want use arguments limit table grading checks specific columns , include additional checks tbl_grade() vec_grade(). Suppose extend food example exercise labelled food-percentage adds count column foods table asks students add new column, pct percentage total food represented food. expect final solution look like student might decide store total food temporary total column. Knowing don’t mind additional column, can use pre_check argument limit .result columns also appear .solution.","code":"grade_this({   # ... pre_check ...      # if requested   pass_if_equal()      # grade the table or vector   tbl_grade()      # ... post_check ...      pass() }) ```{r food-percentage-setup} library(dplyr)  foods <- tibble(     food = c(\"lettuce\", \"tomato\"),     vegetable = c(TRUE, FALSE),     color = c(\"green\", \"red\"),     count = c(5, 3) ) ```  ```{r food-percentage, exercise=TRUE}  ```  ```{r food-percentage-solution} .solution <-     foods %>%     mutate(pct = count / sum(count)) ``` .result <- foods %>%     mutate(         total = sum(count),         pct = count / total     ) ```r grade_this_table(pre_check = {     tbl_grade_is_table(.result)     .result <- .result[intersect(names(.result), names(.solution))] }) ```"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/articles/tblcheck.html","id":"specific-grading-functions","dir":"Articles","previous_headings":"Custom Grading","what":"Specific grading functions","title":"Get started with tblcheck","text":"tbl_grade() vec_grade() calls number grading functions internally. can call functions directly perform specific grading, either pre_check post_check arguments grade_this_table() grade_this_vector(), standard gradethis::grade_this() grading code. Suppose modified food example, telling students 3 tomatoes 5 heads lettuce. ’d like students create fourth column count containing number food item possession. example, ’ll use lower-level functions conjunction gradethis::grade_this(). grading code, may choose grade count column foods using tbl_grade_column(), ignoring columns since provided setup code. student quickly scanned exercise prompt might reverse expected order values count column.","code":"```{r food-count-setup} library(dplyr)  foods <- tibble(     food = c(\"lettuce\", \"tomato\"),     vegetable = c(TRUE, FALSE),     color = c(\"green\", \"red\") ) ```   ```{r food-count, exercise=TRUE}  ```  ```{r food-count-solution} foods %>%     mutate(count = c(5, 3)) ``` ```{r food-count-check} grade_this({   tbl_grade_column(\"count\")   pass_if_equal()   fail() }) ``` foods %>%     mutate(count = c(3, 5)) #> # A tibble: 2 × 4 #>   food    vegetable color count #>   <chr>   <lgl>     <chr> <dbl> #> 1 lettuce TRUE      green     3 #> 2 tomato  FALSE     red       5"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/articles/tblcheck.html","id":"custom-mistake-handling","dir":"Articles","previous_headings":"Custom Grading","what":"Custom mistake handling","title":"Get started with tblcheck","text":"Sometimes, want handle specific circumstance special way. Every tbl_grade_ vec_grade_ function includes tbl_check_ vec_check_ counterpart returns detected problem rather converting problem feedback user (grade gradethis terms). replace tbl_grade_column() tbl_check_column(), can store inspect problem detected column checking function. ’ll experiment local R console writing final exercise checking code. Every problem object contains least three items: problem type describes issue discovered checking function. help pages every check function contain section named Problems problem types detected check function enumerated. Turn: types problems discovered tbl_check_column()? Use help pages find . actual contains value returned user’s code inspected check function. expected contains value returned solution code inspected check function. Problems also include additional information depending problem type. case values problem detected tbl_check_column(), problem object also includes column name. tblcheck includes helper function, is_problem() can use detect differentiate different problem types. can use type argument is_problem() differentiate problem types detected tbl_check_column(). exercise, know advance wording likely trip students, may want create feedback specifically case student reversed food counts. can use is_problem() together .equal() isolate specific case. problems handled custom grading code, can pass problem tbl_grade() create grade default feedback provided tblcheck’s grade functions. problems, problem_grade(problem) won’t return anything. ’s default feedback tbl_grade_column() returned without custom grading code. Tip: can also use statements ignore differences don’t care grading code. Putting everything together grading food-count-check chunk, grading code exercise look like : student reversed count column values receive custom feedback. following specific advice, student revises code correctly create count column.","code":"solution <- foods %>% mutate(count = c(5, 3)) user <- foods %>% mutate(count = c(3, 5))  problem <- tbl_check_column(\"count\", object = user, expected = solution)  problem #> <tblcheck problem> #> The first 2 values of your `count` column should be `5` and `3`, not `3` and `5`. #> $ type    : chr \"values\" #> $ expected: num [1:2] 5 3 #> $ actual  : num [1:2] 3 5 #> $ location: chr \"column\" #> $ column  : chr \"count\" is_problem(problem) #> [1] TRUE is_problem(problem, type = \"length\") #> [1] FALSE is_problem(problem, type = \"values\") #> [1] TRUE if (is_problem(problem, \"values\") && all.equal(problem$actual, c(3, 5))) {     feedback <- paste(         \"Make sure that the values in `count` are ordered\",         \"to match their respective `food`.\",         \"Remember, we have **3** tomatoes and **5** heads of lettuce.\"     )     gradethis::fail(feedback) } #> <gradethis_graded: [Incorrect] #>   Make sure that the values in `count` are ordered to match #>   their respective `food`. Remember, we have **3** tomatoes #>   and **5** heads of lettuce. #> > problem_grade(problem) #> <gradethis_graded: [Incorrect] #>   The first 2 values of your `count` column should be `5` and #>   `3`, not `3` and `5`. #> > ```{r food-count-check} grade_this({   problem <- tbl_check_column(\"count\")      if (is_problem(problem, \"values\") && all.equal(problem$actual, c(3, 5))) {     feedback <- paste(         \"Make sure that the values in `count` are ordered\",         \"to match their respective `food`.\",         \"Remember, we have **3** tomatoes and **5** heads of lettuce.\"     )     fail(feedback)   }      problem_grade(problem)   pass(\"Great job!\") }) ``` foods %>%     mutate(count = c(3, 5)) #> # A tibble: 2 × 4 #>   food    vegetable color count #>   <chr>   <lgl>     <chr> <dbl> #> 1 lettuce TRUE      green     3 #> 2 tomato  FALSE     red       5 foods %>%     mutate(count = c(5, 3)) #> # A tibble: 2 × 4 #>   food    vegetable color count #>   <chr>   <lgl>     <chr> <dbl> #> 1 lettuce TRUE      green     5 #> 2 tomato  FALSE     red       3"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alexander Rossell Hayes. Author, maintainer. Garrick Aden-Buie. Author. Sara Altman. Contributor. RStudio, PBC. Copyright holder, funder.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rossell Hayes , Aden-Buie G (2023). tblcheck: Grade Tables Learning Exercises. https://pkgs.rstudio.com/tblcheck, https://github.com/rstudio/tblcheck.","code":"@Manual{,   title = {tblcheck: Grade Tables in Learning Exercises},   author = {Alexander {Rossell Hayes} and Garrick Aden-Buie},   year = {2023},   note = {https://pkgs.rstudio.com/tblcheck, https://github.com/rstudio/tblcheck}, }"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/index.html","id":"tblcheck-","dir":"","previous_headings":"","what":"Grade Tables in Learning Exercises","title":"Grade Tables in Learning Exercises","text":"tblcheck provides functions grading tibbles, data frames, vectors gradethis. gradethis designed use gradethis learnr tutorials. recommend first comfortable grading learnr tutorials gradethis begin using tblcheck. can learn gradethis package documentation learnr package documentation.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Grade Tables in Learning Exercises","text":"tblcheck still development CRAN yet. development version tblcheck can installed GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"rstudio/tblcheck\")"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Grade Tables in Learning Exercises","text":"use tblcheck learnr tutorial, start loading tblcheck learnr gradethis setup chunk tutorial: include one tblcheck functions gradethis code: grade_this_table() compares .result generated students’ code .solution generated exercise-solution chunk. grade_this_table() passes student’s .result ’s identical .solution, difference detected, produces failing grade message describing problem table. grade_this_table() built gradethis functions tbl_grade(), can used exercise grading code detect problems tables. tbl_grade(), turn, built lower-level functions can used directly compare specific aspects two tables. Learn various tblcheck functions vignette(\"tblcheck\").","code":"```{r setup} library(learnr) library(gradethis) library(tblcheck) library(tibble) ``` ```{r exercise, exercise = TRUE}  ```  ```{r exercise-solution} tibble(fruit = \"tomato\", color = \"red\") ```  ```{r exercise-check} grade_this_table() ```"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Grade Tables in Learning Exercises","text":"Please note tblcheck project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/deprecated-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated Generics — deprecated-methods","title":"Deprecated Generics — deprecated-methods","text":"generics now deprecated.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/deprecated-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated Generics — deprecated-methods","text":"","code":"tblcheck_grade(problem, ...)  tblcheck_message(problem, ...)"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/deprecated-methods.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Deprecated Generics — deprecated-methods","text":"tblcheck_grade(): now problem_grade(). tblcheck_message(): now problem_message().","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/friendly_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a human-readable description of an object's class — friendly_class","title":"Generate a human-readable description of an object's class — friendly_class","text":"Generate human-readable description object's class","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/friendly_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a human-readable description of an object's class — friendly_class","text":"","code":"friendly_class(object)  # S4 method for ANY friendly_class(object)  # S4 method for character friendly_class(object)  # S4 method for numeric friendly_class(object)  # S4 method for integer friendly_class(object)  # S4 method for logical friendly_class(object)  # S4 method for complex friendly_class(object)  # S4 method for raw friendly_class(object)  # S4 method for factor friendly_class(object)  # S4 method for Date friendly_class(object)  # S4 method for POSIXt friendly_class(object)  # S4 method for Period friendly_class(object)  # S4 method for data.frame friendly_class(object)  # S4 method for tbl_df friendly_class(object)  # S4 method for grouped_df friendly_class(object)  # S4 method for rowwise_df friendly_class(object)  # S4 method for list friendly_class(object)  # S4 method for matrix friendly_class(object)  # S4 method for array friendly_class(object)"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/friendly_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a human-readable description of an object's class — friendly_class","text":"object object whose class described","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/friendly_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a human-readable description of an object's class — friendly_class","text":"character string length 1, based class length object.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/grade_this_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Grade this table — grade_this_table","title":"Grade this table — grade_this_table","text":"Automatically grade table resulting student code using gradethis::grade_this() tbl_grade() compare student's result author's solution.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/grade_this_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grade this table — grade_this_table","text":"","code":"grade_this_table(   correct = NULL,   pre_check = NULL,   post_check = NULL,   pass_if_equal = FALSE,   ...,   max_diffs = 3,   cols = NULL,   check_class = TRUE,   ignore_class = NULL,   check_names = TRUE,   check_column_order = FALSE,   check_dimensions = TRUE,   check_groups = TRUE,   check_columns = TRUE,   check_column_class = check_columns,   check_column_levels = check_columns,   check_column_values = check_columns,   tolerance = sqrt(.Machine$double.eps),   hint = getOption(\"gradethis.fail.hint\", FALSE),   encourage = getOption(\"gradethis.fail.encourage\", FALSE),   pass.praise = NULL )"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/grade_this_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grade this table — grade_this_table","text":"correct [character(1)] message shown student .result matches exercise .solution, pass_if_equal TRUE. pre_check, post_check [expression] Code run table vector grading performed. pre check runs calling gradethis::pass_if_equal() can modify adjust student's .result .solution parts either need ignored. arguments can also used conjunction pass_if_equal option grading requirements involved. pass_if_equal [logical(1)] TRUE (default grade_this_vector() grade_this_table()), .result compared .solution gradethis::pass_if_equal() pre check calling tblcheck grading function. ... Additional arguments passed graded() additional data included feedback object. max_diffs [numeric(1)] maximum number mismatched values display informative failure message. Passed tbl_check_names() determine number mismatched column names display n_values argument tbl_check_column() determine number mismatched column values display. Defaults 3. cols [tidy-select] selection columns compare object expected. Differences columns ignored. NULL, default, columns checked. check_class [logical(1)] Whether check object expected classes tbl_check_class(). ignore_class [character()] vector classes ignore finding differences object expected. element named, differences ignored pair element name. example, ignore_class = c(\"integer\" = \"numeric\") ignore class differences object class integer expected class numeric, vice versa. classes expected included ignore_class, class problem never returned. check_names [logical(1)] Whether check object expected column names tbl_check_names(). check_column_order [logical(1)] Whether check columns  object order expected tbl_check_names(). Defaults FALSE. check_dimensions [logical(1)] Whether check object expected number rows columns tbl_check_dimensions(). check_groups [logical(1)] Whether check object expected groups dplyr::group_vars(). check_columns [logical(1)] Whether check columns contents tbl_check_column(). check_column_class [logical(1)] Whether check column class object expected. check_column_levels [logical(1)] Whether check column factor levels object expected. check_column_values [logical(1)] Whether check column values object expected. tolerance [numeric(1) ≥ 0]values differences smaller tolerance ignored. default value close 1.5e-8. hint Include code feedback hint failing message? argument applies fail() fail_if_equal() message added using default options give_code_feedback() maybe_code_feedback(). default value hint can set using gradethis_setup() gradethis.fail.hint option. encourage Include random encouraging phrase random_encouragement()? default value encourage can set using gradethis_setup() gradethis.fail.encourage option. pass.praise Logical TRUE FALSE determine whether praising phrase automatically prepended pass() pass_if_equal() messages. Sets gradethis.pass.praise option.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/grade_this_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Grade this table — grade_this_table","text":"returned feedback equivalent gradethis grading code using grade_this() following components: First pre_check code, , evaluated. code calls pass(), fail(), equivalents, feedback provided immediately. pass_if_equal TRUE, pass_if_equal() called compare .result .solution. message correct used feedback. appropriate tblcheck grading function called, returning feedback: grade_this_table() returns results tbl_grade() grade_this_vector() returns results vec_grade() post_check code, , evaluated feedback call pass(), fail(), equivalents returned. Finally, feedback returned, feedback gradethis::fail() provided student, using options fail.message, fail.hint fail.encourage.","code":""},{"path":[]},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/grade_this_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Grade this table — grade_this_table","text":"","code":"ex <- gradethis::mock_this_exercise(   .solution_code = tibble::tibble(x = 1:3, y = letters[x]),   .user_code = tibble::tibble(x = 1:3, y = c(\"A\", \"b\", \"c\")) )  ## Grading Tables ---- grade_this_table()(ex) #> <tblcheck_graded: [Incorrect] #>   The first 3 values of your `y` column should be `a`, `b`, and #>   `c`, not `A`, `b`, and `c`. #> >  # Roughly equivalent to... gradethis::grade_this({   gradethis::pass_if_equal()   tbl_grade()   gradethis::fail() })(ex) #> <gradethis_graded: [Incorrect] #>   The first 3 values of your `y` column should be `a`, `b`, and #>   `c`, not `A`, `b`, and `c`. #> >"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/grade_this_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Grade this vector — grade_this_vector","title":"Grade this vector — grade_this_vector","text":"Automatically grade vector resulting student code using gradethis::grade_this() vec_grade() compare student's result author's solution.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/grade_this_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grade this vector — grade_this_vector","text":"","code":"grade_this_vector(   correct = NULL,   pre_check = NULL,   post_check = NULL,   pass_if_equal = TRUE,   ...,   max_diffs = 3,   check_class = TRUE,   ignore_class = NULL,   check_length = TRUE,   check_levels = TRUE,   check_values = TRUE,   tolerance = sqrt(.Machine$double.eps),   check_names = TRUE,   hint = getOption(\"gradethis.fail.hint\", FALSE),   encourage = getOption(\"gradethis.fail.encourage\", FALSE),   pass.praise = NULL )"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/grade_this_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grade this vector — grade_this_vector","text":"correct [character(1)] message shown student .result matches exercise .solution, pass_if_equal TRUE. pre_check, post_check [expression] Code run table vector grading performed. pre check runs calling gradethis::pass_if_equal() can modify adjust student's .result .solution parts either need ignored. arguments can also used conjunction pass_if_equal option grading requirements involved. pass_if_equal [logical(1)] TRUE (default grade_this_vector() grade_this_table()), .result compared .solution gradethis::pass_if_equal() pre check calling tblcheck grading function. ... Additional arguments passed graded() additional data included feedback object. max_diffs [numeric(1)] maximum number mismatched values print. Defaults 3. check_class [logical(1)] Whether check object expected classes. ignore_class [character()] vector classes ignore finding differences object expected. element named, differences ignored pair element name. example, ignore_class = c(\"integer\" = \"numeric\") ignore class differences object class integer expected class numeric, vice versa. classes expected included ignore_class, class problem never returned. check_length [logical(1)] Whether check object expected length. check_levels [logical(1)] Whether check object expected factor levels. check_values [logical(1)] Whether check object expected contain values. tolerance [numeric(1) ≥ 0]values differences smaller tolerance ignored. default value close 1.5e-8. check_names [logical(1)] Whether check object expected names. hint Include code feedback hint failing message? argument applies fail() fail_if_equal() message added using default options give_code_feedback() maybe_code_feedback(). default value hint can set using gradethis_setup() gradethis.fail.hint option. encourage Include random encouraging phrase random_encouragement()? default value encourage can set using gradethis_setup() gradethis.fail.encourage option. pass.praise Logical TRUE FALSE determine whether praising phrase automatically prepended pass() pass_if_equal() messages. Sets gradethis.pass.praise option.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/grade_this_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Grade this vector — grade_this_vector","text":"returned feedback equivalent gradethis grading code using grade_this() following components: First pre_check code, , evaluated. code calls pass(), fail(), equivalents, feedback provided immediately. pass_if_equal TRUE, pass_if_equal() called compare .result .solution. message correct used feedback. appropriate tblcheck grading function called, returning feedback: grade_this_table() returns results tbl_grade() grade_this_vector() returns results vec_grade() post_check code, , evaluated feedback call pass(), fail(), equivalents returned. Finally, feedback returned, feedback gradethis::fail() provided student, using options fail.message, fail.hint fail.encourage.","code":""},{"path":[]},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/grade_this_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Grade this vector — grade_this_vector","text":"","code":"ex <- gradethis::mock_this_exercise(   .solution_code = tibble::tibble(x = 1:3, y = letters[x]),   .user_code = tibble::tibble(x = 1:3, y = c(\"A\", \"b\", \"c\")) )  #' ## Grading Vectors ---- # Here we use `pre_check` to modify `.result` and grade_this_vector(   pre_check = {     .result <- .result$y     .solution <- .solution$y   } )(ex) #> <tblcheck_graded: [Incorrect] #>   The first 3 values of your result should be `a`, `b`, and `c`, #>   not `A`, `b`, and `c`. #> >  # Roughly equivalent to... gradethis::grade_this({   .result <- .result$y   .solution <- .solution$y   gradethis::pass_if_equal()   vec_grade()   gradethis::fail() })(ex) #> <gradethis_graded: [Incorrect] #>   The first 3 values of your result should be `a`, `b`, and `c`, #>   not `A`, `b`, and `c`. #> >"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/hinted_class_message.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a hint for how to convert one object type to another — hinted_class_message","title":"Generate a hint for how to convert one object type to another — hinted_class_message","text":"Generate hint convert one object type another","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/hinted_class_message.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a hint for how to convert one object type to another — hinted_class_message","text":"","code":"hinted_class_message(object, expected)  # S4 method for ANY,ANY hinted_class_message(object, expected)  # S4 method for rowwise_df,grouped_df hinted_class_message(object, expected)  # S4 method for data.frame,grouped_df hinted_class_message(object, expected)  # S4 method for grouped_df,data.frame hinted_class_message(object, expected)  # S4 method for data.frame,rowwise_df hinted_class_message(object, expected)  # S4 method for rowwise_df,data.frame hinted_class_message(object, expected)"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/hinted_class_message.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a hint for how to convert one object type to another — hinted_class_message","text":"object object compared expected expected object expected class","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/hinted_class_message.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a hint for how to convert one object type to another — hinted_class_message","text":"character string length 1","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/problem.html","id":null,"dir":"Reference","previous_headings":"","what":"Declare a problem — problem","title":"Declare a problem — problem","text":"Useful constructing small list communicate problem discovered checking.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/problem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Declare a problem — problem","text":"","code":"problem(   type,   expected,   actual,   ...,   .class = c(paste0(type, \"_problem\"), \"tblcheck_problem\") )"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/problem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Declare a problem — problem","text":"type character string, e.g. column_values table_rows, describes problem discovered. expected, actual expected actual values. included value summary, e.g. nrow(expected) length(actual). careful include large amounts data. ... Additional elements included problem object. .class class problem. Typically, expect problem class <type>_problem, building custom classes may set classes desired.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/problem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Declare a problem — problem","text":"Returns problem class <type>_problem base classes tblcheck_problem gradethis_problem.","code":""},{"path":[]},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/problem.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Declare a problem — problem","text":"","code":"problem(   type = \"class\",   expected = \"character\",   actual = \"numeric\",   expected_length = 1,   actual_length = 2 ) #> <tblcheck problem> #> Your result should be a text string (class `character`), but it is a text string (class `character`). #> $ type           : chr \"class\" #> $ expected       : chr \"character\" #> $ actual         : chr \"numeric\" #> $ expected_length: num 1 #> $ actual_length  : num 2"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/problem_grade.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply automatic grading to a problem object — problem_grade","title":"Apply automatic grading to a problem object — problem_grade","text":"Automatically converts problem() object gradethis grade. problem_grade() S4 generic tblcheck provides internal method problems class \"tblcheck_problem\". tblcheck, problems class, problems automatically turned failing grades gradethis::fail() using message provided problem_message().","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/problem_grade.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply automatic grading to a problem object — problem_grade","text":"","code":"problem_grade(problem, max_diffs = 3, env = parent.frame(), ...)  # S3 method for default problem_grade(problem, max_diffs = 3, env = parent.frame(), ...)  # S3 method for list problem_grade(problem, max_diffs = 3, env = parent.frame(), ...)  # S3 method for gradethis_problem problem_grade(problem, max_diffs = 3, env = parent.frame(), ...)  # S3 method for tblcheck_problem problem_grade(problem, max_diffs = 3, env = parent.frame(), ...)"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/problem_grade.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply automatic grading to a problem object — problem_grade","text":"problem problem generated tbl_check(), vec_check() related helper functions. max_diffs [numeric(1)] maximum number mismatched values display informative failure message. Passed tbl_check_names() determine number mismatched column names display n_values argument tbl_check_column() determine number mismatched column values display. Defaults 3. env environment used grading. ... Arguments passed gradethis::fail hint Include code feedback hint failing message? argument applies fail() fail_if_equal() message added using default options give_code_feedback() maybe_code_feedback(). default value hint can set using gradethis_setup() gradethis.fail.hint option. encourage Include random encouraging phrase random_encouragement()? default value encourage can set using gradethis_setup() gradethis.fail.encourage option.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/problem_grade.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply automatic grading to a problem object — problem_grade","text":"gradethis::fail() message NULL invisibly.","code":""},{"path":[]},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/problem_grade.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply automatic grading to a problem object — problem_grade","text":"","code":".result <- 1:10 .solution <- letters[1:10] problem <- vec_check() problem_grade(problem) #> <gradethis_graded: [Incorrect] #>   Your result should be a vector of text (class `character`), but #>   it is a vector of integers (class `integer`). #> >"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/problem_message.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a message from a problem object — problem_message","title":"Create a message from a problem object — problem_message","text":"problem_message() S3 generic powers conversion problems detected tbl_check(), vec_check(), related helper functions human-readable message.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/problem_message.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a message from a problem object — problem_message","text":"","code":"problem_message(problem, ...)"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/problem_message.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a message from a problem object — problem_message","text":"problem object base class gradethis_problem. Problems identified tblcheck also include tblcheck_problem, plus additional classes specifically identify problem type. ... Additional arguments passed underlying methods.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/problem_message.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a message from a problem object — problem_message","text":"length-1 character string message describing problem.","code":""},{"path":[]},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/problem_message.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a message from a problem object — problem_message","text":"","code":"problem <- problem(   type = \"class\",   expected = \"character\",   actual = \"numeric\",   expected_length = 1,   actual_length = 2 )  problem_message(problem) #> Your result should be a text string (class `character`), but it is a text string (class `character`)."},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/problem_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Problem helper functions — problem_type","title":"Problem helper functions — problem_type","text":"problem_type() returns problem's type, NULL input problem. is_problem() tests whether object gradethis problem. is_tblcheck_problem() tests whether object problem created tblcheck. as_problem() converts list tblcheck_problem.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/problem_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Problem helper functions — problem_type","text":"","code":"problem_type(x)  is_problem(x, type = NULL)  is_tblcheck_problem(x, type = NULL)  as_problem(x)"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/problem_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Problem helper functions — problem_type","text":"x object type [character(1)] problem type","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/problem_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Problem helper functions — problem_type","text":"is_problem() is_tblcheck_problem() return logical length 1. problem_type() returns character length 1. as_problem() returns tblcheck_problem.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/problem_type.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Problem helper functions — problem_type","text":"type specified, is_problem() is_tblcheck_problem() test whether object problem specified type.","code":""},{"path":[]},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/problem_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Problem helper functions — problem_type","text":"","code":"problem_type(vec_check(1, \"1\")) #> [1] \"class\" is_problem(vec_check(1, \"1\"), \"vector_class\") #> [1] FALSE is_tblcheck_problem(vec_check(1, \"1\"), \"class\") #> [1] TRUE"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. gradethis .result, .solution","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that the rows and columns of two tables are the same — tbl_check","title":"Check that the rows and columns of two tables are the same — tbl_check","text":"Checks differences object expected following order: Check table class tbl_check_class() Check column names tbl_check_names() Check number rows columns tbl_check_dimensions() Check groups tbl_check_groups() Check column tbl_check_column() tables differ tbl_check() returns list describing problem tbl_grade() returns failing grade informative message gradethis::fail()","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that the rows and columns of two tables are the same — tbl_check","text":"","code":"tbl_check(   object = .result,   expected = .solution,   cols = NULL,   check_class = TRUE,   ignore_class = NULL,   check_names = TRUE,   check_column_order = FALSE,   check_dimensions = TRUE,   check_groups = TRUE,   check_columns = TRUE,   check_column_class = check_columns,   check_column_levels = check_columns,   check_column_values = check_columns,   tolerance = sqrt(.Machine$double.eps),   env = parent.frame() )  tbl_grade(   object = .result,   expected = .solution,   cols = NULL,   max_diffs = 3,   check_class = TRUE,   ignore_class = NULL,   check_names = TRUE,   check_column_order = FALSE,   check_dimensions = TRUE,   check_groups = TRUE,   check_columns = TRUE,   check_column_class = check_columns,   check_column_levels = check_columns,   check_column_values = check_columns,   tolerance = sqrt(.Machine$double.eps),   env = parent.frame(),   ... )"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that the rows and columns of two tables are the same — tbl_check","text":"object data frame compared expected. expected data frame containing expected result. cols [tidy-select] selection columns compare object expected. Differences columns ignored. NULL, default, columns checked. check_class [logical(1)] Whether check object expected classes tbl_check_class(). ignore_class [character()] vector classes ignore finding differences object expected. element named, differences ignored pair element name. example, ignore_class = c(\"integer\" = \"numeric\") ignore class differences object class integer expected class numeric, vice versa. classes expected included ignore_class, class problem never returned. check_names [logical(1)] Whether check object expected column names tbl_check_names(). check_column_order [logical(1)] Whether check columns  object order expected tbl_check_names(). Defaults FALSE. check_dimensions [logical(1)] Whether check object expected number rows columns tbl_check_dimensions(). check_groups [logical(1)] Whether check object expected groups dplyr::group_vars(). check_columns [logical(1)] Whether check columns contents tbl_check_column(). check_column_class [logical(1)] Whether check column class object expected. check_column_levels [logical(1)] Whether check column factor levels object expected. check_column_values [logical(1)] Whether check column values object expected. tolerance [numeric(1) ≥ 0]values differences smaller tolerance ignored. default value close 1.5e-8. env environment find .result .solution. max_diffs [numeric(1)] maximum number mismatched values display informative failure message. Passed tbl_check_names() determine number mismatched column names display n_values argument tbl_check_column() determine number mismatched column values display. Defaults 3. ... Arguments passed gradethis::fail hint Include code feedback hint failing message? argument applies fail() fail_if_equal() message added using default options give_code_feedback() maybe_code_feedback(). default value hint can set using gradethis_setup() gradethis.fail.hint option. encourage Include random encouraging phrase random_encouragement()? default value encourage can set using gradethis_setup() gradethis.fail.encourage option.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that the rows and columns of two tables are the same — tbl_check","text":"issues, list tbl_check() gradethis::fail() message tbl_grade(). Otherwise, invisibly returns NULL.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check.html","id":"problems","dir":"Reference","previous_headings":"","what":"Problems","title":"Check that the rows and columns of two tables are the same — tbl_check","text":"class: table expected classes. not_table: object inherit data.frame class. names: table column names expected, missing names expected. names_order: table column names expected, different order. ncol: table expected number columns. nrow: table expected number rows. groups: table groups expected, missing groups expected. Additional problems may produced tbl_check_column().","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that the rows and columns of two tables are the same — tbl_check","text":"","code":".result <- data.frame(a = 1:10, b = 11:20) .solution <- tibble::tibble(a = 1:10, b = 11:20) tbl_check() #> <tblcheck problem> #> Your table should be a tibble (class `tbl_df`), but it is a data frame (class `data.frame`). #> $ type    : chr \"class\" #> $ expected: tibble [10 × 2] (S3: tbl_df/tbl/data.frame) #>  ..$ a: int [1:10] 1 2 3 4 5 6 7 8 9 10 #>  ..$ b: int [1:10] 11 12 13 14 15 16 17 18 19 20 #> $ actual  :'data.frame':\t10 obs. of  2 variables: #>  ..$ a: int [1:10] 1 2 3 4 5 6 7 8 9 10 #>  ..$ b: int [1:10] 11 12 13 14 15 16 17 18 19 20 #> $ location: chr \"table\" tbl_grade() #> <gradethis_graded: [Incorrect] #>   Your table should be a tibble (class `tbl_df`), but it is a #>   data frame (class `data.frame`). #> >  .result <- tibble::tibble(a = 1:10, b = a, c = a, d = a, e = a, f = a) .solution <- tibble::tibble(z = 1:10, y = z, x = z, w = z, v = z, u = z) tbl_check() #> <tblcheck problem> #> Your table should have columns named `z`, `y`, `x`, and 3 more. Your table should not have columns named `a`, `b`, `c`, or 3 more. #> $ type      : chr \"names\" #> $ missing   : chr [1:6] \"z\" \"y\" \"x\" \"w\" ... #> $ unexpected: chr [1:6] \"a\" \"b\" \"c\" \"d\" ... #> $ location  : chr \"table\" tbl_grade() #> <gradethis_graded: [Incorrect] #>   Your table should have columns named `z`, `y`, `x`, and 3 more. #>   Your table should not have columns named `a`, `b`, `c`, or 3 #>   more. #> > tbl_grade(max_diffs = 5) #> <gradethis_graded: [Incorrect] #>   Your table should have columns named `z`, `y`, `x`, `w`, `v`, #>   and 1 more. Your table should not have columns named `a`, `b`, #>   `c`, `d`, `e`, or 1 more. #> > tbl_grade(max_diffs = Inf) #> <gradethis_graded: [Incorrect] #>   Your table should have columns named `z`, `y`, `x`, `w`, `v`, #>   and `u`. Your table should not have columns named `a`, `b`, #>   `c`, `d`, `e`, or `f`. #> >  .result <- tibble::tibble(a = 1:10, b = 11:20) .solution <- tibble::tibble(a = 1:11, b = 12:22) tbl_check() #> <tblcheck problem> #> Your table should have 11 rows, but it has 10 rows. #> $ type    : chr \"nrow\" #> $ expected: int 11 #> $ actual  : int 10 #> $ location: chr \"table\" tbl_grade() #> <gradethis_graded: [Incorrect] #>   Your table should have 11 rows, but it has 10 rows. #> >  .result <- tibble::tibble(a = 1:10, b = 11:20) .solution <- tibble::tibble(a = letters[1:10], b = letters[11:20]) tbl_check() #> <tblcheck problem> #> Your `a` column should be a vector of text (class `character`), but it is a vector of integers (class `integer`). #> $ type    : chr \"class\" #> $ expected: chr [1:10] \"a\" \"b\" \"c\" \"d\" ... #> $ actual  : int [1:10] 1 2 3 4 5 6 7 8 9 10 #> $ location: chr \"column\" #> $ column  : chr \"a\" tbl_grade() #> <gradethis_graded: [Incorrect] #>   Your `a` column should be a vector of text (class `character`), #>   but it is a vector of integers (class `integer`). #> >  .result <- tibble::tibble(a = 1:10, intermediate = 6:15, b = 11:20) .solution <- tibble::tibble(a = 1:10, b = 11:20) tbl_check(cols = any_of(names(.solution))) tbl_grade(cols = any_of(names(.solution)))  .result <- tibble::tibble(a = 1:10, b = 11:20) .solution <- tibble::tibble(a = 11:20, b = 1:10) tbl_check() #> <tblcheck problem> #> The first 3 values of your `a` column should be `11`, `12`, and `13`, not `1`, `2`, and `3`. #> $ type    : chr \"values\" #> $ expected: int [1:10] 11 12 13 14 15 16 17 18 19 20 #> $ actual  : int [1:10] 1 2 3 4 5 6 7 8 9 10 #> $ location: chr \"column\" #> $ column  : chr \"a\" tbl_grade() #> <gradethis_graded: [Incorrect] #>   The first 3 values of your `a` column should be `11`, `12`, and #>   `13`, not `1`, `2`, and `3`. #> > tbl_grade(max_diffs = 5) #> <gradethis_graded: [Incorrect] #>   The first 5 values of your `a` column should be `11`, `12`, #>   `13`, `14`, and `15`, not `1`, `2`, `3`, `4`, and `5`. #> > tbl_grade(max_diffs = Inf) #> <gradethis_graded: [Incorrect] #>   The first 10 values of your `a` column should be `11`, `12`, #>   `13`, `14`, `15`, `16`, `17`, `18`, `19`, and `20`, not `1`, #>   `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, and `10`. #> >  .result <- tibble::tibble(a = 1:10, b = rep(1:2, 5)) .solution <- dplyr::group_by(tibble::tibble(a = 1:10, b = rep(1:2, 5)), b) tbl_check() #> <tblcheck problem> #> Your table isn't a grouped data frame, but I was expecting it to be grouped. Maybe you need to use `group_by()`? #> $ type    : chr \"class\" #> $ expected: gropd_df [10 × 2] (S3: grouped_df/tbl_df/tbl/data.frame) #>  ..$ a: int [1:10] 1 2 3 4 5 6 7 8 9 10 #>  ..$ b: int [1:10] 1 2 1 2 1 2 1 2 1 2 #>  ..- attr(*, \"groups\")= tibble [2 × 2] (S3: tbl_df/tbl/data.frame) #>  .. ..$ b    : int [1:2] 1 2 #>  .. ..$ .rows: list<int> [1:2]  #>  .. .. ..$ : int [1:5] 1 3 5 7 9 #>  .. .. ..$ : int [1:5] 2 4 6 8 10 #>  .. .. ..@ ptype: int(0)  #>  .. ..- attr(*, \".drop\")= logi TRUE #> $ actual  : tibble [10 × 2] (S3: tbl_df/tbl/data.frame) #>  ..$ a: int [1:10] 1 2 3 4 5 6 7 8 9 10 #>  ..$ b: int [1:10] 1 2 1 2 1 2 1 2 1 2 #> $ location: chr \"table\" tbl_grade() #> <gradethis_graded: [Incorrect] #>   Your table isn't a grouped data frame, but I was expecting it #>   to be grouped. Maybe you need to use `group_by()`? #> > tbl_grade(check_groups = FALSE)"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks that two objects have the same classes — tbl_check_class","title":"Checks that two objects have the same classes — tbl_check_class","text":"Checks object expected class. classes differ tbl_check_class() vec_check_class() return list describing problem tbl_grade_class() vec_grade_class() return failing grade informative message gradethis::fail()","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks that two objects have the same classes — tbl_check_class","text":"","code":"tbl_check_class(   object = .result,   expected = .solution,   ignore_class = NULL,   env = parent.frame() )  vec_check_class(   object = .result,   expected = .solution,   ignore_class = NULL,   env = parent.frame() )  tbl_grade_class(   object = .result,   expected = .solution,   ignore_class = NULL,   env = parent.frame(),   ... )  vec_grade_class(   object = .result,   expected = .solution,   ignore_class = NULL,   env = parent.frame(),   ... )"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks that two objects have the same classes — tbl_check_class","text":"object object compared expected. expected object containing expected result. ignore_class [character()] vector classes ignore finding differences object expected. element named, differences ignored pair element name. example, ignore_class = c(\"integer\" = \"numeric\") ignore class differences object class integer expected class numeric, vice versa. classes expected included ignore_class, class problem never returned. env environment find .result .solution. ... Arguments passed gradethis::fail hint Include code feedback hint failing message? argument applies fail() fail_if_equal() message added using default options give_code_feedback() maybe_code_feedback(). default value hint can set using gradethis_setup() gradethis.fail.hint option. encourage Include random encouraging phrase random_encouragement()? default value encourage can set using gradethis_setup() gradethis.fail.encourage option.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks that two objects have the same classes — tbl_check_class","text":"issues, list tbl_check_class() vec_check_class() gradethis::fail() message tbl_grade_class() vec_grade_class(). Otherwise, invisibly returns NULL.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check_class.html","id":"problems","dir":"Reference","previous_headings":"","what":"Problems","title":"Checks that two objects have the same classes — tbl_check_class","text":"class: object expected classes","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check_class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks that two objects have the same classes — tbl_check_class","text":"","code":".result <- 1:10 .solution <- as.character(1:10) vec_check_class() #> <tblcheck problem> #> Your result should be a vector of text (class `character`), but it is a vector of integers (class `integer`). #> $ type    : chr \"class\" #> $ expected: chr [1:10] \"1\" \"2\" \"3\" \"4\" ... #> $ actual  : int [1:10] 1 2 3 4 5 6 7 8 9 10 vec_grade_class() #> <gradethis_graded: [Incorrect] #>   Your result should be a vector of text (class `character`), but #>   it is a vector of integers (class `integer`). #> >  .result <- data.frame(a = 1:10) .solution <- tibble::tibble(a = 1:10) tbl_check_class() #> <tblcheck problem> #> Your result should be a tibble (class `tbl_df`), but it is a data frame (class `data.frame`). #> $ type    : chr \"class\" #> $ expected: tibble [10 × 1] (S3: tbl_df/tbl/data.frame) #>  ..$ a: int [1:10] 1 2 3 4 5 6 7 8 9 10 #> $ actual  :'data.frame':\t10 obs. of  1 variable: #>  ..$ a: int [1:10] 1 2 3 4 5 6 7 8 9 10 tbl_grade_class() #> <gradethis_graded: [Incorrect] #>   Your result should be a tibble (class `tbl_df`), but it is a #>   data frame (class `data.frame`). #> >  .result <- tibble::tibble(a = 1:10, b = a %% 2 == 0) .solution <- dplyr::group_by(tibble::tibble(a = 1:10, b = a %% 2 == 0), b) tbl_check_class() #> <tblcheck problem> #> Your table isn't a grouped data frame, but I was expecting it to be grouped. Maybe you need to use `group_by()`? #> $ type    : chr \"class\" #> $ expected: gropd_df [10 × 2] (S3: grouped_df/tbl_df/tbl/data.frame) #>  ..$ a: int [1:10] 1 2 3 4 5 6 7 8 9 10 #>  ..$ b: logi [1:10] FALSE TRUE FALSE TRUE FALSE TRUE ... #>  ..- attr(*, \"groups\")= tibble [2 × 2] (S3: tbl_df/tbl/data.frame) #>  .. ..$ b    : logi [1:2] FALSE TRUE #>  .. ..$ .rows: list<int> [1:2]  #>  .. .. ..$ : int [1:5] 1 3 5 7 9 #>  .. .. ..$ : int [1:5] 2 4 6 8 10 #>  .. .. ..@ ptype: int(0)  #>  .. ..- attr(*, \".drop\")= logi TRUE #> $ actual  : tibble [10 × 2] (S3: tbl_df/tbl/data.frame) #>  ..$ a: int [1:10] 1 2 3 4 5 6 7 8 9 10 #>  ..$ b: logi [1:10] FALSE TRUE FALSE TRUE FALSE TRUE ... tbl_grade_class() #> <gradethis_graded: [Incorrect] #>   Your table isn't a grouped data frame, but I was expecting it #>   to be grouped. Maybe you need to use `group_by()`? #> >  # Ignore the difference between tibble and data frame .result <- data.frame(a = 1:10) .solution <- tibble::tibble(a = 1:10) tbl_check_class(ignore_class = c(\"tbl_df\", \"tbl\")) tbl_grade_class(ignore_class = c(\"tbl_df\", \"tbl\"))  # Ignore the difference between integer and double .result <- 1L .solution <- 1 vec_check_class(ignore_class = c(\"integer\" = \"numeric\")) vec_grade_class(ignore_class = c(\"integer\" = \"numeric\"))"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks that a column is identical across two tables — tbl_check_column","title":"Checks that a column is identical across two tables — tbl_check_column","text":"Checks differences name column object expected following order: Check name column exists object Check class vec_check_class() Check length vec_check_dimensions() column factor, check factor levels vec_check_levels() Check column values vec_check_values() columns differ tbl_check_column() returns list describing problem tbl_grade_column() returns failing grade informative message gradethis::fail()","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks that a column is identical across two tables — tbl_check_column","text":"","code":"tbl_check_column(   column,   object = .result,   expected = .solution,   check_class = TRUE,   ignore_class = NULL,   check_length = TRUE,   check_levels = TRUE,   check_values = TRUE,   tolerance = sqrt(.Machine$double.eps),   check_names = FALSE,   env = parent.frame() )  tbl_grade_column(   column,   object = .result,   expected = .solution,   max_diffs = 3,   check_class = TRUE,   ignore_class = NULL,   check_length = TRUE,   check_levels = TRUE,   check_values = TRUE,   tolerance = sqrt(.Machine$double.eps),   check_names = FALSE,   env = parent.frame(),   ... )"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks that a column is identical across two tables — tbl_check_column","text":"column [character(1)] name column check. object data frame compared expected. expected data frame containing expected result. check_class [logical(1)] Whether check column class object expected. ignore_class [character()] vector classes ignore finding differences object expected. element named, differences ignored pair element name. example, ignore_class = c(\"integer\" = \"numeric\") ignore class differences object class integer expected class numeric, vice versa. classes expected included ignore_class, class problem never returned. check_length [logical(1)] Whether check column length object expected. check_levels [logical(1)] Whether check column factor levels object expected. check_values [logical(1)] Whether check column values object expected. tolerance [numeric(1) ≥ 0]values differences smaller tolerance ignored. default value close 1.5e-8. check_names [logical(1)] Whether check column names object expected. Defaults FALSE. env environment find .result .solution. max_diffs [numeric(1)] maximum number mismatched values print. Defaults 3. ... Arguments passed gradethis::fail hint Include code feedback hint failing message? argument applies fail() fail_if_equal() message added using default options give_code_feedback() maybe_code_feedback(). default value hint can set using gradethis_setup() gradethis.fail.hint option. encourage Include random encouraging phrase random_encouragement()? default value encourage can set using gradethis_setup() gradethis.fail.encourage option.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks that a column is identical across two tables — tbl_check_column","text":"issues, list tbl_check_column() gradethis::fail() message tbl_grade_column(). Otherwise, invisibly returns NULL.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check_column.html","id":"problems","dir":"Reference","previous_headings":"","what":"Problems","title":"Checks that a column is identical across two tables — tbl_check_column","text":"names (table_problem): object contain column named column. class: mismatch classes column. length: column expected length. levels_n, levels, levels_reversed, levels_order: See vec_check_levels(). values: column expected values. names (column_problem): column different names expected. names_order: column names expected, different order.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check_column.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks that a column is identical across two tables — tbl_check_column","text":"","code":".result <- tibble::tibble(a = 1:10, b = 11:20) .solution <- tibble::tibble(a = letters[1:10], b = letters[11:20]) tbl_check_column(\"a\") #> <tblcheck problem> #> Your `a` column should be a vector of text (class `character`), but it is a vector of integers (class `integer`). #> $ type    : chr \"class\" #> $ expected: chr [1:10] \"a\" \"b\" \"c\" \"d\" ... #> $ actual  : int [1:10] 1 2 3 4 5 6 7 8 9 10 #> $ location: chr \"column\" #> $ column  : chr \"a\" tbl_grade_column(\"a\") #> <gradethis_graded: [Incorrect] #>   Your `a` column should be a vector of text (class `character`), #>   but it is a vector of integers (class `integer`). #> >  .result <- tibble::tibble(a = 1:10, b = 11:20) .solution <- tibble::tibble(a = 1:11, b = 12:22) tbl_check_column(\"a\") #> <tblcheck problem> #> Your `a` column should contain 11 values, but it has 10 values. I expected your result to include the value `11`. #> $ type           : chr \"length\" #> $ expected       : int [1:11] 1 2 3 4 5 6 7 8 9 10 ... #> $ actual         : int [1:10] 1 2 3 4 5 6 7 8 9 10 #> $ expected_length: int 11 #> $ actual_length  : int 10 #> $ location       : chr \"column\" #> $ column         : chr \"a\" tbl_grade_column(\"a\") #> <gradethis_graded: [Incorrect] #>   Your `a` column should contain 11 values, but it has 10 values. #>   I expected your result to include the value `11`. #> >  .result <- tibble::tibble(a = 1:10, b = 11:20) .solution <- tibble::tibble(a = 11:20, b = 1:10) tbl_check_column(\"a\") #> <tblcheck problem> #> The first 3 values of your `a` column should be `11`, `12`, and `13`, not `1`, `2`, and `3`. #> $ type    : chr \"values\" #> $ expected: int [1:10] 11 12 13 14 15 16 17 18 19 20 #> $ actual  : int [1:10] 1 2 3 4 5 6 7 8 9 10 #> $ location: chr \"column\" #> $ column  : chr \"a\" tbl_grade_column(\"a\") #> <gradethis_graded: [Incorrect] #>   The first 3 values of your `a` column should be `11`, `12`, and #>   `13`, not `1`, `2`, and `3`. #> > tbl_grade_column(\"a\", max_diffs = 5) #> <gradethis_graded: [Incorrect] #>   The first 5 values of your `a` column should be `11`, `12`, #>   `13`, `14`, and `15`, not `1`, `2`, `3`, `4`, and `5`. #> > tbl_grade_column(\"a\", max_diffs = Inf) #> <gradethis_graded: [Incorrect] #>   The first 10 values of your `a` column should be `11`, `12`, #>   `13`, `14`, `15`, `16`, `17`, `18`, `19`, and `20`, not `1`, #>   `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, and `10`. #> >"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check_dimensions.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that the dimensions of two object are the same — tbl_check_dimensions","title":"Check that the dimensions of two object are the same — tbl_check_dimensions","text":"Checks object expected dimenisons. dimensions differ tbl_check_dimensions() returns list describing problem tbl_grade_dimensions() returns failing grade informative message gradethis::fail()","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check_dimensions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that the dimensions of two object are the same — tbl_check_dimensions","text":"","code":"tbl_check_dimensions(   object = .result,   expected = .solution,   check_ncol = TRUE,   env = parent.frame() )  vec_check_dimensions(   object = .result,   expected = .solution,   check_ncol = TRUE,   env = parent.frame() )  vec_check_length(   object = .result,   expected = .solution,   check_ncol = TRUE,   env = parent.frame() )  tbl_grade_dimensions(   object = .result,   expected = .solution,   check_ncol = TRUE,   env = parent.frame(),   ... )  vec_grade_dimensions(   object = .result,   expected = .solution,   check_ncol = TRUE,   env = parent.frame(),   ... )  vec_grade_length(   object = .result,   expected = .solution,   check_ncol = TRUE,   env = parent.frame(),   ... )"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check_dimensions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that the dimensions of two object are the same — tbl_check_dimensions","text":"object object compared expected. expected object containing expected result. check_ncol [logical(1)] Whether check object expected number columns. env environment find .result .solution. ... Arguments passed gradethis::fail hint Include code feedback hint failing message? argument applies fail() fail_if_equal() message added using default options give_code_feedback() maybe_code_feedback(). default value hint can set using gradethis_setup() gradethis.fail.hint option. encourage Include random encouraging phrase random_encouragement()? default value encourage can set using gradethis_setup() gradethis.fail.encourage option.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check_dimensions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that the dimensions of two object are the same — tbl_check_dimensions","text":"issues, list tbl_check_dimensions() gradethis::fail() message tbl_grade_dimensions(). Otherwise, invisibly returns NULL.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check_dimensions.html","id":"problems","dir":"Reference","previous_headings":"","what":"Problems","title":"Check that the dimensions of two object are the same — tbl_check_dimensions","text":"dimensions_n: object expected different number dimensions length: object expected one-dimensional vectors different lengths ncol: object expected two-dimensional objects different number columns nrow: object expected two-dimensional objects different number rows dimensions: object expected multi-dimensional arrays different dimensions","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check_dimensions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that the dimensions of two object are the same — tbl_check_dimensions","text":"","code":".result <- 1:10 .solution <- 1:5 tbl_check_dimensions() #> <tblcheck problem> #> Your result should contain 5 values, but it has 10 values. #> $ type           : chr \"length\" #> $ expected       : int [1:5] 1 2 3 4 5 #> $ actual         : int [1:10] 1 2 3 4 5 6 7 8 9 10 #> $ expected_length: int 5 #> $ actual_length  : int 10 tbl_grade_dimensions() #> <gradethis_graded: [Incorrect] #>   Your result should contain 5 values, but it has 10 values. #> >  .result <- tibble::tibble(a = 1:10, b = 1:10, c = 1:10) .solution <- tibble::tibble(a = 1:10, b = 1:10) tbl_check_dimensions() #> <tblcheck problem> #> Your result should have 2 columns, but it has 3 columns. #> $ type    : chr \"ncol\" #> $ expected: int 2 #> $ actual  : int 3 tbl_grade_dimensions() #> <gradethis_graded: [Incorrect] #>   Your result should have 2 columns, but it has 3 columns. #> >  .result <- tibble::tibble(a = 1:10, b = 1:10) .solution <- tibble::tibble(a = 1:5, b = 1:5) tbl_check_dimensions() #> <tblcheck problem> #> Your result should have 5 rows, but it has 10 rows. #> $ type    : chr \"nrow\" #> $ expected: int 5 #> $ actual  : int 10 tbl_grade_dimensions() #> <gradethis_graded: [Incorrect] #>   Your result should have 5 rows, but it has 10 rows. #> >  .result <- 1:12 .solution <- matrix(1:12, 3) tbl_check_dimensions() #> <tblcheck problem> #> Your result should have 2 dimensions, but it has 1 dimension. #> $ type    : chr \"dimensions_n\" #> $ expected: int 2 #> $ actual  : int 1 tbl_grade_dimensions() #> <gradethis_graded: [Incorrect] #>   Your result should have 2 dimensions, but it has 1 dimension. #> >"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that the groups of two object are the same — tbl_check_groups","title":"Check that the groups of two object are the same — tbl_check_groups","text":"Checks object expected groups. groups differ tbl_check_groups() returns list describing problem tbl_grade_groups() returns failing grade informative message gradethis::fail()","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that the groups of two object are the same — tbl_check_groups","text":"","code":"tbl_check_groups(object = .result, expected = .solution, env = parent.frame())  tbl_grade_groups(   object = .result,   expected = .solution,   max_diffs = 3,   env = parent.frame(),   ... )"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that the groups of two object are the same — tbl_check_groups","text":"object object compared expected. expected object containing expected result. env environment find .result .solution. max_diffs [numeric(1)] maximum number missing /unexpected names include informative failure message. Defaults 3. ... Arguments passed gradethis::fail hint Include code feedback hint failing message? argument applies fail() fail_if_equal() message added using default options give_code_feedback() maybe_code_feedback(). default value hint can set using gradethis_setup() gradethis.fail.hint option. encourage Include random encouraging phrase random_encouragement()? default value encourage can set using gradethis_setup() gradethis.fail.encourage option.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that the groups of two object are the same — tbl_check_groups","text":"issues, list tbl_check_groups() gradethis::fail() message tbl_grade_groups(). Otherwise, invisibly returns NULL.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check_groups.html","id":"problems","dir":"Reference","previous_headings":"","what":"Problems","title":"Check that the groups of two object are the same — tbl_check_groups","text":"groups: object groups expected, missing groups expected.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that the groups of two object are the same — tbl_check_groups","text":"","code":".result <- dplyr::group_by(tibble::tibble(a = 1:10, b = 11:20), a) .solution <- dplyr::group_by(tibble::tibble(a = 1:10, b = 11:20), b) tbl_check_groups() #> <tblcheck problem> #> Your table should be grouped by `b`. Your table should not be grouped by `a`.  #> $ type      : chr \"groups\" #> $ missing   : chr \"b\" #> $ unexpected: chr \"a\" #> $ location  : chr \"table\" tbl_grade_groups() #> <gradethis_graded: [Incorrect] #>   Your table should be grouped by `b`. Your table should not be #>   grouped by `a`. #> >"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check_is_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks that an object is a table — tbl_check_is_table","title":"Checks that an object is a table — tbl_check_is_table","text":"Checks object inherits data.frame class. tbl_check_is_table() returns list describing problem tbl_grade_is_table() returns failing grade informative message gradethis::fail()","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check_is_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks that an object is a table — tbl_check_is_table","text":"","code":"tbl_check_is_table(object = .result, env = parent.frame())  tbl_grade_is_table(object = .result, env = parent.frame(), ...)"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check_is_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks that an object is a table — tbl_check_is_table","text":"object object compared expected. env environment find .result .solution. ... Arguments passed gradethis::fail hint Include code feedback hint failing message? argument applies fail() fail_if_equal() message added using default options give_code_feedback() maybe_code_feedback(). default value hint can set using gradethis_setup() gradethis.fail.hint option. encourage Include random encouraging phrase random_encouragement()? default value encourage can set using gradethis_setup() gradethis.fail.encourage option.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check_is_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks that an object is a table — tbl_check_is_table","text":"issues, list tbl_check_is_table() gradethis::fail() message tbl_grade_is_table(). Otherwise, invisibly returns NULL.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check_is_table.html","id":"problems","dir":"Reference","previous_headings":"","what":"Problems","title":"Checks that an object is a table — tbl_check_is_table","text":"not_table: object table","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check_is_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks that an object is a table — tbl_check_is_table","text":"","code":".result <- data.frame(a = 1:10) tbl_check_is_table() tbl_grade_is_table()  .result <- tibble::tibble(a = 1:10) tbl_check_is_table() tbl_grade_is_table()  .result <- list(a = 1:10) tbl_check_is_table() #> <tblcheck problem> #> Your result should be a table, but it is a list (class `list`). #> $ type  : chr \"not_table\" #> $ actual:List of 1 #>  ..$ a: int [1:10] 1 2 3 4 5 6 7 8 9 10 tbl_grade_is_table() #> <gradethis_graded: [Incorrect] #>   Your result should be a table, but it is a list (class `list`). #> >"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that the names of two object are the same — tbl_check_names","title":"Check that the names of two object are the same — tbl_check_names","text":"Checks object expected names. names differ tbl_check_names() vec_check_names() returns list describing problem tbl_grade_names() vec_grade_names() returns failing grade informative message gradethis::fail()","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that the names of two object are the same — tbl_check_names","text":"","code":"tbl_check_names(   object = .result,   expected = .solution,   check_order = TRUE,   env = parent.frame() )  vec_check_names(   object = .result,   expected = .solution,   check_order = TRUE,   env = parent.frame() )  tbl_grade_names(   object = .result,   expected = .solution,   max_diffs = 3,   check_order = TRUE,   env = parent.frame(),   ... )  vec_grade_names(   object = .result,   expected = .solution,   max_diffs = 3,   check_order = TRUE,   env = parent.frame(),   ... )"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that the names of two object are the same — tbl_check_names","text":"object object compared expected. expected object containing expected result. check_order [logical(1)] Whether check names object expected order. env environment find .result .solution. max_diffs [numeric(1)] maximum number missing /unexpected names include informative failure message. Defaults 3. ... Arguments passed gradethis::fail hint Include code feedback hint failing message? argument applies fail() fail_if_equal() message added using default options give_code_feedback() maybe_code_feedback(). default value hint can set using gradethis_setup() gradethis.fail.hint option. encourage Include random encouraging phrase random_encouragement()? default value encourage can set using gradethis_setup() gradethis.fail.encourage option.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that the names of two object are the same — tbl_check_names","text":"issues, list tbl_check_names() vec_check_names() gradethis::fail() message tbl_grade_names() vec_grade_names(). Otherwise, invisibly returns NULL.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check_names.html","id":"problems","dir":"Reference","previous_headings":"","what":"Problems","title":"Check that the names of two object are the same — tbl_check_names","text":"names: object names expected, missing names expected. names_order: object names expected, different order.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that the names of two object are the same — tbl_check_names","text":"","code":".result <- c(1, 2, 3, 4, 5, 6, 7) .solution <- c(a = 1, b = 2, c = 3, d = 4, e = 5, f = 6, g = 7) vec_check_names() #> <tblcheck problem> #> Your result should have the names `a`, `b`, `c`, and 4 more.  #> $ type      : chr \"names\" #> $ missing   : chr [1:7] \"a\" \"b\" \"c\" \"d\" ... #> $ unexpected: chr(0)  vec_grade_names() #> <gradethis_graded: [Incorrect] #>   Your result should have the names `a`, `b`, `c`, and 4 more. #> > vec_grade_names(max_diffs = 5) #> <gradethis_graded: [Incorrect] #>   Your result should have the names `a`, `b`, `c`, `d`, `e`, and #>   2 more. #> > vec_grade_names(max_diffs = Inf) #> <gradethis_graded: [Incorrect] #>   Your result should have the names `a`, `b`, `c`, `d`, `e`, `f`, #>   and `g`. #> >  .result <- tibble::tibble(a = 1:5, b = 6:10, c = 11:15) .solution <- tibble::tibble(a = 1:5, x = 6:10, y = 11:15) tbl_check_names() #> <tblcheck problem> #> Your table should have columns named `x` and `y`. Your table should not have columns named `b` or `c`. #> $ type      : chr \"names\" #> $ missing   : chr [1:2] \"x\" \"y\" #> $ unexpected: chr [1:2] \"b\" \"c\" #> $ location  : chr \"table\" tbl_grade_names() #> <gradethis_graded: [Incorrect] #>   Your table should have columns named `x` and `y`. Your table #>   should not have columns named `b` or `c`. #> >"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that the rows and columns of two tables are the same — tbl_check_table","title":"Check that the rows and columns of two tables are the same — tbl_check_table","text":"tbl_check_table() tbl_grade_table() renamed tbl_check() tbl_grade().","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_check_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that the rows and columns of two tables are the same — tbl_check_table","text":"","code":"tbl_check_table(   object = .result,   expected = .solution,   check_class = TRUE,   check_names = TRUE,   check_column_order = FALSE,   check_dimensions = TRUE,   check_groups = TRUE,   check_columns = TRUE,   check_column_class = check_columns,   check_column_values = check_columns,   env = parent.frame() )  tbl_grade_table(   object = .result,   expected = .solution,   max_diffs = 3,   check_class = TRUE,   check_names = TRUE,   check_column_order = FALSE,   check_dimensions = TRUE,   check_groups = TRUE,   check_columns = TRUE,   check_column_class = check_columns,   check_column_values = check_columns,   env = parent.frame(),   ... )"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_equal.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that the rows and columns of two tables are the same — tbl_equal","title":"Check that the rows and columns of two tables are the same — tbl_equal","text":"Test two tables equivalent using process tbl_check(). Unlike tbl_check(), returns either problem object NULL, tbl_equal() returns either TRUE FALSE.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_equal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that the rows and columns of two tables are the same — tbl_equal","text":"","code":"tbl_equal(   object = .result,   expected = .solution,   cols = NULL,   check_class = TRUE,   ignore_class = NULL,   check_names = TRUE,   check_column_order = FALSE,   check_dimensions = TRUE,   check_groups = TRUE,   check_columns = TRUE,   check_column_class = check_columns,   check_column_levels = check_columns,   check_column_values = check_columns,   tolerance = sqrt(.Machine$double.eps),   env = parent.frame() )"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_equal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that the rows and columns of two tables are the same — tbl_equal","text":"object data frame compared expected. expected data frame containing expected result. cols [tidy-select] selection columns compare object expected. Differences columns ignored. NULL, default, columns checked. check_class [logical(1)] Whether check object expected classes tbl_check_class(). ignore_class [character()] vector classes ignore finding differences object expected. element named, differences ignored pair element name. example, ignore_class = c(\"integer\" = \"numeric\") ignore class differences object class integer expected class numeric, vice versa. classes expected included ignore_class, class problem never returned. check_names [logical(1)] Whether check object expected column names tbl_check_names(). check_column_order [logical(1)] Whether check columns  object order expected tbl_check_names(). Defaults FALSE. check_dimensions [logical(1)] Whether check object expected number rows columns tbl_check_dimensions(). check_groups [logical(1)] Whether check object expected groups dplyr::group_vars(). check_columns [logical(1)] Whether check columns contents tbl_check_column(). check_column_class [logical(1)] Whether check column class object expected. check_column_levels [logical(1)] Whether check column factor levels object expected. check_column_values [logical(1)] Whether check column values object expected. tolerance [numeric(1) ≥ 0]values differences smaller tolerance ignored. default value close 1.5e-8. env environment find .result .solution.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_equal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that the rows and columns of two tables are the same — tbl_equal","text":"TRUE FALSE value.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tbl_equal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that the rows and columns of two tables are the same — tbl_equal","text":"","code":"tbl_equal(   data.frame(a = 1:10, b = 11:20),   data.frame(b = 11:20, a = 1:10) ) #> [1] TRUE"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tblcheck-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tblcheck: Grade Tables in Learning Exercises — tblcheck-package","title":"tblcheck: Grade Tables in Learning Exercises — tblcheck-package","text":"'tblcheck' extends 'gradethis' functions inspect data frame tibble objects make easier teachers check student tables meet expectations.","code":""},{"path":[]},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/tblcheck-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tblcheck: Grade Tables in Learning Exercises — tblcheck-package","text":"Maintainer: Alexander Rossell Hayes alex.rossellhayes@rstudio.com (ORCID) Authors: Garrick Aden-Buie garrick@rstudio.com (ORCID) contributors: Sara Altman sara.altman@rstudio.com (ORCID) [contributor] RStudio, PBC [copyright holder, funder]","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/vec_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks that two vectors are the same — vec_check","title":"Checks that two vectors are the same — vec_check","text":"Checks differences object expected following order: Check class vec_check_class() Check length vec_check_dimensions() vector factor, check factor levels vec_check_levels() Check vector values vec_check_values() Check names vec_check_names() vectors differ vec_check() returns list describing problem vec_grade() returns failing grade informative message gradethis::fail()","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/vec_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks that two vectors are the same — vec_check","text":"","code":"vec_check(   object = .result,   expected = .solution,   check_class = TRUE,   ignore_class = NULL,   check_length = TRUE,   check_levels = TRUE,   check_values = TRUE,   tolerance = sqrt(.Machine$double.eps),   check_names = TRUE,   env = parent.frame() )  vec_grade(   object = .result,   expected = .solution,   max_diffs = 3,   check_class = TRUE,   ignore_class = NULL,   check_length = TRUE,   check_levels = TRUE,   check_values = TRUE,   tolerance = sqrt(.Machine$double.eps),   check_names = TRUE,   env = parent.frame(),   ... )"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/vec_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks that two vectors are the same — vec_check","text":"object vector compared expected. expected vector containing expected result. check_class [logical(1)] Whether check object expected classes. ignore_class [character()] vector classes ignore finding differences object expected. element named, differences ignored pair element name. example, ignore_class = c(\"integer\" = \"numeric\") ignore class differences object class integer expected class numeric, vice versa. classes expected included ignore_class, class problem never returned. check_length [logical(1)] Whether check object expected length. check_levels [logical(1)] Whether check object expected factor levels. check_values [logical(1)] Whether check object expected contain values. tolerance [numeric(1) ≥ 0]values differences smaller tolerance ignored. default value close 1.5e-8. check_names [logical(1)] Whether check object expected names. env environment find .result .solution. max_diffs [numeric(1)] maximum number mismatched values print. Defaults 3. ... Arguments passed gradethis::fail hint Include code feedback hint failing message? argument applies fail() fail_if_equal() message added using default options give_code_feedback() maybe_code_feedback(). default value hint can set using gradethis_setup() gradethis.fail.hint option. encourage Include random encouraging phrase random_encouragement()? default value encourage can set using gradethis_setup() gradethis.fail.encourage option.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/vec_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks that two vectors are the same — vec_check","text":"issues, list vec_check() gradethis::fail() message vec_grade(). Otherwise, invisibly returns NULL.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/vec_check.html","id":"problems","dir":"Reference","previous_headings":"","what":"Problems","title":"Checks that two vectors are the same — vec_check","text":"class: object classes expected. length: object length expected. levels_n, levels, levels_reversed, levels_order: See vec_check_levels(). values: object contain values expected. names: object different names expected. names_order: object names expected, different order.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/vec_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks that two vectors are the same — vec_check","text":"","code":".result <- 1:10 .solution <- letters[1:10] vec_check() #> <tblcheck problem> #> Your result should be a vector of text (class `character`), but it is a vector of integers (class `integer`). #> $ type    : chr \"class\" #> $ expected: chr [1:10] \"a\" \"b\" \"c\" \"d\" ... #> $ actual  : int [1:10] 1 2 3 4 5 6 7 8 9 10 #> $ location: chr \"vector\" vec_grade() #> <gradethis_graded: [Incorrect] #>   Your result should be a vector of text (class `character`), but #>   it is a vector of integers (class `integer`). #> >  .result <- 1:10 .solution <- 1:11 vec_check() #> <tblcheck problem> #> Your result should contain 11 values, but it has 10 values. I expected your result to include the value `11`. #> $ type           : chr \"length\" #> $ expected       : int [1:11] 1 2 3 4 5 6 7 8 9 10 ... #> $ actual         : int [1:10] 1 2 3 4 5 6 7 8 9 10 #> $ expected_length: int 11 #> $ actual_length  : int 10 #> $ location       : chr \"vector\" vec_grade() #> <gradethis_graded: [Incorrect] #>   Your result should contain 11 values, but it has 10 values. I #>   expected your result to include the value `11`. #> >  .result <- 1:10 .solution <- rlang::set_names(1:10, letters[1:10]) vec_check() #> <tblcheck problem> #> Your result should have the names `a`, `b`, `c`, and 7 more.  #> $ type      : chr \"names\" #> $ missing   : chr [1:10] \"a\" \"b\" \"c\" \"d\" ... #> $ unexpected: chr(0)  #> $ location  : chr \"vector\" vec_grade() #> <gradethis_graded: [Incorrect] #>   Your result should have the names `a`, `b`, `c`, and 7 more. #> > vec_grade(max_diffs = 5) #> <gradethis_graded: [Incorrect] #>   Your result should have the names `a`, `b`, `c`, `d`, `e`, and #>   5 more. #> > vec_grade(max_diffs = Inf) #> <gradethis_graded: [Incorrect] #>   Your result should have the names `a`, `b`, `c`, `d`, `e`, `f`, #>   `g`, `h`, `i`, and `j`. #> >  .result <- 1:10 .solution <- 11:20 vec_check() #> <tblcheck problem> #> The first 3 values of your result should be `11`, `12`, and `13`, not `1`, `2`, and `3`. #> $ type    : chr \"values\" #> $ expected: int [1:10] 11 12 13 14 15 16 17 18 19 20 #> $ actual  : int [1:10] 1 2 3 4 5 6 7 8 9 10 #> $ location: chr \"vector\" vec_grade() #> <gradethis_graded: [Incorrect] #>   The first 3 values of your result should be `11`, `12`, and #>   `13`, not `1`, `2`, and `3`. #> > vec_grade(max_diffs = 5) #> <gradethis_graded: [Incorrect] #>   The first 5 values of your result should be `11`, `12`, `13`, #>   `14`, and `15`, not `1`, `2`, `3`, `4`, and `5`. #> > vec_grade(max_diffs = Inf) #> <gradethis_graded: [Incorrect] #>   The first 10 values of your result should be `11`, `12`, `13`, #>   `14`, `15`, `16`, `17`, `18`, `19`, and `20`, not `1`, `2`, #>   `3`, `4`, `5`, `6`, `7`, `8`, `9`, and `10`. #> >"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/vec_check_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that the levels of two factors are the same — vec_check_levels","title":"Check that the levels of two factors are the same — vec_check_levels","text":"Checks object expected levels. levels differ vec_check_levels() returns list describing problem vec_grade_levels() returns failing grade informative message gradethis::fail()","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/vec_check_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that the levels of two factors are the same — vec_check_levels","text":"","code":"vec_check_levels(object = .result, expected = .solution, env = parent.frame())  vec_grade_levels(   object = .result,   expected = .solution,   max_diffs = 3,   env = parent.frame(),   ... )"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/vec_check_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that the levels of two factors are the same — vec_check_levels","text":"object object compared expected. expected object containing expected result. env environment find .result .solution. max_diffs [numeric(1)] maximum number missing /unexpected names include informative failure message. Defaults 3. ... Arguments passed gradethis::fail hint Include code feedback hint failing message? argument applies fail() fail_if_equal() message added using default options give_code_feedback() maybe_code_feedback(). default value hint can set using gradethis_setup() gradethis.fail.hint option. encourage Include random encouraging phrase random_encouragement()? default value encourage can set using gradethis_setup() gradethis.fail.encourage option.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/vec_check_levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that the levels of two factors are the same — vec_check_levels","text":"issues, list vec_check_levels() gradethis::fail() message vec_grade_levels(). Otherwise, invisibly returns NULL.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/vec_check_levels.html","id":"problems","dir":"Reference","previous_headings":"","what":"Problems","title":"Check that the levels of two factors are the same — vec_check_levels","text":"levels_n: object expected different number levels. levels: object levels expected, missing levels expected. levels_reversed: levels object opposite order expected. level_order: levels object order expected.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/vec_check_levels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that the levels of two factors are the same — vec_check_levels","text":"","code":".result <- as.factor(rep_len(letters[1:3], 6)) .solution <- as.factor(rep_len(letters[1:2], 6)) vec_check_levels() #> <tblcheck problem> #> Your result should have 2 levels, but it has 3 levels. #> $ type    : chr \"levels_n\" #> $ expected: int 2 #> $ actual  : int 3 vec_grade_levels() #> <gradethis_graded: [Incorrect] #>   Your result should have 2 levels, but it has 3 levels. #> >  .result <- as.factor(letters[1:6]) .solution <- as.factor(letters[21:26]) vec_check_levels() #> <tblcheck problem> #> Your result should have levels named `u`, `v`, `w`, and 3 more. Your result should not have levels named `a`, `b`, `c`, or 3 more. #> $ type      : chr \"levels\" #> $ missing   : chr [1:6] \"u\" \"v\" \"w\" \"x\" ... #> $ unexpected: chr [1:6] \"a\" \"b\" \"c\" \"d\" ... vec_grade_levels() #> <gradethis_graded: [Incorrect] #>   Your result should have levels named `u`, `v`, `w`, and 3 more. #>   Your result should not have levels named `a`, `b`, `c`, or 3 #>   more. #> > vec_grade_levels(max_diffs = 5) #> <gradethis_graded: [Incorrect] #>   Your result should have levels named `u`, `v`, `w`, `x`, `y`, #>   and 1 more. Your result should not have levels named `a`, `b`, #>   `c`, `d`, `e`, or 1 more. #> > vec_grade_levels(max_diffs = Inf) #> <gradethis_graded: [Incorrect] #>   Your result should have levels named `u`, `v`, `w`, `x`, `y`, #>   and `z`. Your result should not have levels named `a`, `b`, #>   `c`, `d`, `e`, or `f`. #> >"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/vec_check_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks that two vectors are contain the same values — vec_check_values","title":"Checks that two vectors are contain the same values — vec_check_values","text":"Check two vectors contain values. values differ vec_check_values() returns list describing problem vec_grade_values() returns failing grade informative message gradethis::fail()","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/vec_check_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks that two vectors are contain the same values — vec_check_values","text":"","code":"vec_check_values(   object = .result,   expected = .solution,   tolerance = sqrt(.Machine$double.eps),   env = parent.frame() )  vec_grade_values(   object = .result,   expected = .solution,   tolerance = sqrt(.Machine$double.eps),   max_diffs = 3,   env = parent.frame(),   ... )"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/vec_check_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks that two vectors are contain the same values — vec_check_values","text":"object vector compared expected. expected vector containing expected result. tolerance [numeric(1) ≥ 0]values differences smaller tolerance ignored. default value close 1.5e-8. env environment find .result .solution. max_diffs [numeric(1)] maximum number mismatched values print. Defaults 3. ... Arguments passed gradethis::fail hint Include code feedback hint failing message? argument applies fail() fail_if_equal() message added using default options give_code_feedback() maybe_code_feedback(). default value hint can set using gradethis_setup() gradethis.fail.hint option. encourage Include random encouraging phrase random_encouragement()? default value encourage can set using gradethis_setup() gradethis.fail.encourage option.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/vec_check_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks that two vectors are contain the same values — vec_check_values","text":"issues, list vec_check_values() gradethis::fail() message vec_grade_values(). Otherwise, invisibly returns NULL.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/vec_check_values.html","id":"problems","dir":"Reference","previous_headings":"","what":"Problems","title":"Checks that two vectors are contain the same values — vec_check_values","text":"values: object contain values expected","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/vec_check_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks that two vectors are contain the same values — vec_check_values","text":"","code":".result <- 1:10 .solution <- letters[1:10] vec_check_values() #> <tblcheck problem> #> Your result should be a vector of text (class `character`), but it is a vector of integers (class `integer`). #> $ type    : chr \"class\" #> $ expected: chr [1:10] \"a\" \"b\" \"c\" \"d\" ... #> $ actual  : int [1:10] 1 2 3 4 5 6 7 8 9 10 vec_grade_values() #> <gradethis_graded: [Incorrect] #>   Your result should be a vector of text (class `character`), but #>   it is a vector of integers (class `integer`). #> >  .result <- 1:10 .solution <- 1:11 vec_check_values() #> <tblcheck problem> #> Your result should contain 11 values, but it has 10 values. I expected your result to include the value `11`. #> $ type           : chr \"length\" #> $ expected       : int [1:11] 1 2 3 4 5 6 7 8 9 10 ... #> $ actual         : int [1:10] 1 2 3 4 5 6 7 8 9 10 #> $ expected_length: int 11 #> $ actual_length  : int 10 vec_grade_values() #> <gradethis_graded: [Incorrect] #>   Your result should contain 11 values, but it has 10 values. I #>   expected your result to include the value `11`. #> >  .result <- 1:10 .solution <- rlang::set_names(1:10, letters[1:10]) vec_check_values() vec_grade_values() vec_grade_values(max_diffs = 5) vec_grade_values(max_diffs = Inf)  .result <- 1:10 .solution <- 11:20 vec_check_values() #> <tblcheck problem> #> The first 3 values of your result should be `11`, `12`, and `13`, not `1`, `2`, and `3`. #> $ type    : chr \"values\" #> $ expected: int [1:10] 11 12 13 14 15 16 17 18 19 20 #> $ actual  : int [1:10] 1 2 3 4 5 6 7 8 9 10 vec_grade_values() #> <gradethis_graded: [Incorrect] #>   The first 3 values of your result should be `11`, `12`, and #>   `13`, not `1`, `2`, and `3`. #> > vec_grade_values(max_diffs = 5) #> <gradethis_graded: [Incorrect] #>   The first 5 values of your result should be `11`, `12`, `13`, #>   `14`, and `15`, not `1`, `2`, `3`, `4`, and `5`. #> > vec_grade_values(max_diffs = Inf) #> <gradethis_graded: [Incorrect] #>   The first 10 values of your result should be `11`, `12`, `13`, #>   `14`, `15`, `16`, `17`, `18`, `19`, and `20`, not `1`, `2`, #>   `3`, `4`, `5`, `6`, `7`, `8`, `9`, and `10`. #> >"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/vec_check_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that the rows and columns of two tables are the same — vec_check_vector","title":"Check that the rows and columns of two tables are the same — vec_check_vector","text":"vec_check_vector() vec_grade_vector() renamed vec_check() vec_grade().","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/reference/vec_check_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that the rows and columns of two tables are the same — vec_check_vector","text":"","code":"vec_check_vector(   object = .result,   expected = .solution,   check_class = TRUE,   check_length = TRUE,   check_levels = TRUE,   check_values = TRUE,   check_names = TRUE,   env = parent.frame() )  vec_grade_vector(   object = .result,   expected = .solution,   max_diffs = 3,   check_class = TRUE,   check_length = TRUE,   check_values = TRUE,   check_names = TRUE,   env = parent.frame(),   ... )"},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/news/index.html","id":"tblcheck-development-version","dir":"Changelog","previous_headings":"","what":"tblcheck (development version)","title":"tblcheck (development version)","text":"Add tbl_equal(), returns TRUE FALSE value indicating two tables equivalent, using process tbl_check(). tbl_check(), tbl_grade(), tbl_check_column(), tbl_grade_column() vec_grade() gain arguments set whether check levels factors. vec_check() vec_grade() now check factor levels object expected factors. cases, difference caught earlier class checking. Previously, calling vec_check(x, factor(x), check_class = FALSE) signal problem one vector levels .","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/news/index.html","id":"tblcheck-022","dir":"Changelog","previous_headings":"","what":"tblcheck 0.2.2","title":"tblcheck 0.2.2","text":"e.g. friendly_class(character(1)) returns “text string (class character)”. e.g. object ungrouped tibble expected grouped tibble, hinted_class_message() generates message suggests using group_by(). Using generic functions allows tbl_grade_class() messages expanded adding methods new classes tutorial setup code external packages.","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/news/index.html","id":"tblcheck-021","dir":"Changelog","previous_headings":"","what":"tblcheck 0.2.1","title":"tblcheck 0.2.1","text":"grade_this_table() now sets pass_if_equal = FALSE default (#128).","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/news/index.html","id":"tblcheck-020","dir":"Changelog","previous_headings":"","what":"tblcheck 0.2.0","title":"tblcheck 0.2.0","text":"Messages now suggest using functions group_by(), ungroup() rowwise() object expected data.frames (#119). Messages now describe non-atomic variables length > 1 “objects”, “vectors” (#122). problem() problem_message() now exported functions. first helps packages create problem objects second generic method can used turn problem object human readable description (#124).","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/news/index.html","id":"deprecated-functions-0-2-0","dir":"Changelog","previous_headings":"","what":"Deprecated Functions","title":"tblcheck 0.2.0","text":"tblcheck_grade() now called problem_grade(). old function name continue work, deprecation warning prompt update problem_grade() (#124).","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/news/index.html","id":"tblcheck-013","dir":"Changelog","previous_headings":"","what":"tblcheck 0.1.3","title":"tblcheck 0.1.3","text":"Add tolerance argument vec_*_values() (#111).","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/news/index.html","id":"tblcheck-012","dir":"Changelog","previous_headings":"","what":"tblcheck 0.1.2","title":"tblcheck 0.1.2","text":"Adds argument ignore_class class checks (passed table, vector, column checks), specifying class differences ignore (#109). Table checking now ignores grouped_df class check_groups = FALSE (#109). Classes now checked setequal() instead identical(), objects classes different orders trigger class problem (#109). Fixed bug message generated values problem two vectors different made unique values (e.g. c(1, 2, 3) c(2, 1, 3, 2)) (#104).","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/news/index.html","id":"tblcheck-011","dir":"Changelog","previous_headings":"","what":"tblcheck 0.1.1","title":"tblcheck 0.1.1","text":"Fixed messages values problems originating columns mention problematic column (#100). new vignette exercise examples demonstrates types feedback grade_this_table() grade_this_vector() provide (#95). vec_grade_values() now treats NA values position object expected vectors equal (#96). grade_this_table() updated include cols check_column_order arguments recently added tbl_grade() (#92).","code":""},{"path":"https://pkgs.rstudio.com/tblcheck/preview/pr132/news/index.html","id":"tblcheck-010","dir":"Changelog","previous_headings":"","what":"tblcheck 0.1.0","title":"tblcheck 0.1.0","text":"New package inspecting data frames vectors grading gradethis. grade_this_table() automated grading tables grade_this_vector() automated grading vectors Additional, lower-level functions come two variants, grade function returns gradethis grade check function returns list detailing differences actual expected output. tbl_grade() tbl_check() check tibble data frame matches expected output. vec_grade() vec_check() check vector marches expected output. tbl_grade_column() tbl_check_column() check single column tibble data frame matches expected output (powered vec_grade() vec_check()). tbl_grade_class(), tbl_check_class(), vec_grade_class() vec_check_class() check class object matches expected output. tbl_grade_dimensions(), tbl_check_dimensions(), vec_grade_dimensions() vec_check_dimensions() check length, number rows columns, number dimensions object match expected output. tbl_grade_groups() tbl_check_groups() check groups table (created dplyr::group_by()) match expected output. vec_grade_levels() vec_check_levels() check levels factor match expected output. tbl_grade_names(), tbl_check_names(), vec_grade_names() vec_check_names() check names object match expected output. vec_grade_values() vec_check_values() check values vector match expected output. Also includes number functions dealing problem output check functions.","code":""}]
